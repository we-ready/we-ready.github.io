{"componentChunkName":"component---src-templates-blog-js","path":"/blog/20210128003_weready_npm","result":{"pageContext":{"frontmatter":{"id":"20210128003_weready_npm","title":"利用 weready npm 包实现管理后台构建","subtitle":"管理管理后台，需要解决一些典型问题，而这些典型问题，可以提炼成一个 npm 包","subject":"管理后台","author":"Chris Wei","keywords":"admin;mvvm;view;model","tags":"react;context;fetch;ant design","category":"经验技巧","cover":null,"created_when":"2021-01-28","updated_when":"2021-01-28","level":300},"excerpt":" 利用 weready npm 包实现管…\n","html":"<h1>利用 weready npm 包实现管理后台构建</h1>\n<h2>weready npm lib</h2>\n<ul>\n<li><code>weready-base-front</code> 包含了前端代码一些通用的底层操作，包括：对后端及第三方接口的各种访问（<code>get</code>，<code>post</code>，<code>put</code>，<code>delete</code>），对 <code>restful api</code> 实现增删改查 和 文件传输，以及前端浏览器的 <code>storage</code> 的访问，进行数缓存；</li>\n<li><code>weready-bee-styled</code> 包含了利用 <code>styled-components</code> 封装的 react 组件，比如：文件上传组件</li>\n<li><code>weready-context-provider</code> 包含了利用 <code>react context</code> 封装的针对 <code>RESTFUL</code> 接口类型数据模型的上下文（model context），及相应的 增删改查 的异步操作，和 对应的 <code>Provider</code>；还包含了  <code>react context</code> 封装的，针对用户常规的异步操作功能，比如：注册、登录、退出登录、修改个人资料、修改密码、找回密码、等等</li>\n<li><code>weready-ant-plus</code> 包含了基于 <code>ant design</code> 封装的列表、表单，并包含了常规操作</li>\n</ul>\n<h2>使用说明</h2>\n<h4>通过 <code>create-react-app</code> 脚手架创建前端应用</h4>\n<h4>添加 <code>typescript</code> 支持</h4>\n<h4>通过 <code>yarn add</code> 引入　<code>ant design</code> <code>styled-components</code> 等，第三方库</h4>\n<h4>通过 <code>yarn add</code> 引入　<code>weready-base-front</code> <code>weready-bee-styled</code> <code>weready-ant-plus</code> <code>weready-context-provider</code></h4>\n<h4>在 <code>App.tsx</code> 中引入 <code>context provider</code>，并全局注入</h4>\n<pre><code>export default function App () { return (\n  &#x3C;Router ref={ref => thisApp.router = ref}>\n    &#x3C;ProviderUser superRequest={superRequest} userCache={userCache} url={userUrl}>\n      &#x3C;ProviderEntities superRequest={superRequest}>\n        &#x3C;GlobalStyle />\n        &#x3C;Route component={AppRoute}/>\n      &#x3C;/ProviderEntities>\n    &#x3C;/ProviderUser>\n  &#x3C;/Router>\n)}\n</code></pre>\n<h4>某个业务逻辑中，定义所需包含数据的相关字段</h4>\n<pre><code>export const TABLE_COLUMNS = [\n  ...CONFIG.STANDARD_TABLE_COLUMNS('CONTENT').filter(col => (\n    ['category', 'tree_path', 'serial_code', 'name', 'title', 'subtitle', 'comments', 'type', 'release_datetime', 'updated_when', 'created_when'].includes(col.dataIndex)\n  )),\n];\n\nexport const TABLE_COLUMNS_VISIBLE = ['serial_code', 'name', 'title', 'subtitle', 'comments', 'type', 'release_datetime', ];\n</code></pre>\n<blockquote>\n<p>常用的字段，可以统一定义</p>\n</blockquote>\n<pre><code>  { \n    title: '名称',\n    dataIndex: 'name', \n    sortDirections: ['descend', 'ascend'],\n    type: 'STRING',\n  },\n  { \n    title: '标识',\n    dataIndex: 'label', \n    sortDirections: ['descend', 'ascend'],\n    type: 'STRING',\n  },\n  { \n    title: '作者',\n    dataIndex: 'author', \n    sortDirections: ['descend', 'ascend'],\n    type: 'STRING',\n  },\n  {\n    title: '类型',\n    dataIndex: 'type',\n    sortDirections: ['descend', 'ascend'],\n    filterMultiple: true,\n    filters: convertTagProps2TableFilterOptions(\n      variant === 'MAINDATA' ? TABLE_COL_TYPE_FILE :\n      variant === 'CONTENT' ? TABLE_COL_TYPE_TEMPLATE :\n      TABLE_COL_TYPE\n    ),\n    render: thisRenderTag,\n    exporter: thisExportTag,\n    type: 'SELECT',\n  },\n  {\n    title: '标签',\n    dataIndex: 'tags',\n    sortDirections: ['descend', 'ascend'],\n    render: renderTags,\n  },\n  {\n    title: '更新时间',\n    dataIndex: 'updated_when',\n    sortDirections: ['descend', 'ascend'],\n    type: 'DATETIME',\n    render: renderDateTime,\n  },\n  {\n    title: '创建时间',\n    dataIndex: 'created_when',\n    sortDirections: ['descend', 'ascend'],\n    type: 'DATETIME',\n    render: renderDateTime,\n  },\n</code></pre>\n<h4>有了上述的字段定义，就可以在列表页面代码中使用：</h4>\n<pre><code>const TABLE_ACTION_CALLBACK_DEFAULT = buildDefaultTableCallback(['模板下载', '新增', '导入', '导出', '刷新', '批量删除', '批量修改', '删除树', '重命名', /* '增节点', '清选择' */]);\nconst TABLE_OPTION_CALLBACK_DEFAULT = buildDefaultTableCallback(['详情', '删除',]);\n\nconst API_URL = 'contents';\nconst ENTITY_NAME = 'contents';\nexport function ContentsList (props: any) {\n\n  const context = useContext&#x3C;any>(ContextEntities);\n  const [detailsPayload, setDetailsPayload] = useState(null);\n\n  const { slug } = props?.match?.params || {};\n  const entity = `${ENTITY_NAME}::${slug}`;\n  const model = context[entity];\n\n  useEffect(() => {\n    if (!model) {\n      context.effect?.initial(entity, API_URL, { view: { tableViewColumns: TABLE_COLUMNS_VISIBLE }, query: QUERY_CONDITION_DEFAULT[slug] } );\n    }\n    if (!!model?.apiUrl &#x26;&#x26; !model.loaded) {\n      context.effect?.fetch(entity);\n    }\n  }, [slug, entity, model, context.effect]);\n  \n  const callback = { ...TABLE_ACTION_CALLBACK_DEFAULT };\n  const option = { ...TABLE_OPTION_CALLBACK_DEFAULT };\n  return (\n    (!model) ? &#x3C;h1>!!! Invalid Entity Name !!!&#x3C;/h1> :\n    &#x3C;>\n      &#x3C;TableSharp\n        columns={TABLE_COLUMNS} \n        slug={slug}\n        rows={model.data} \n        model={model}\n        context={context}\n        callback={callback}\n        option={option}\n        treeIndex={{pathFieldName: ['tree_path'], keyFieldName: 'id'}}\n        form={{\n          create: FormCreate,\n          update: FormUpdate,\n        }}\n        onDetails={(payload) => setDetailsPayload(payload)}\n      />\n\n      { slug === 'form' ? \n        &#x3C;DetailsForm\n          slug={slug}\n          payload={detailsPayload} \n          visible={!!detailsPayload} \n          onClose={() => setDetailsPayload(null)} \n        />\n        :\n        &#x3C;DetailsNotice\n          slug={slug}\n          payload={detailsPayload} \n          visible={!!detailsPayload} \n          onClose={() => setDetailsPayload(null)} \n        />\n      }\n    &#x3C;/>\n  );\n};\n</code></pre>\n<blockquote>\n<p>列表页会根据用户交互，自动展示<code>详情页表单</code>、<code>新记录创建表单</code>、<code>批量更新表单</code></p>\n</blockquote>\n<h4><code>详情页表单</code> 代码类似</h4>\n<pre><code>export default function DetailsForm ({onClose, visible, payload, slug}) {\n  return (\n    !visible ? null : \n    &#x3C;DetailsDrawer onClose={onClose} visible={visible} >\n      &#x3C;DetailsTabsPlus payload={payload} >\n        &#x3C;DetailsBasic    tab={'基础信息'} slug={slug} />\n        &#x3C;DetailsRichText tab={'详细说明'} />\n        &#x3C;DetailsSpec     tab={'规格参数'} />\n        &#x3C;DetailsYaml     tab={'配置信息'} />\n      &#x3C;/DetailsTabsPlus>\n    &#x3C;/DetailsDrawer>\n  );\n};\n</code></pre>\n<blockquote>\n<p>其中的 <code>DetailsBasic</code>, <code>DetailsRichText</code>, <code>DetailsSpec</code>, <code>DetailsYaml</code>, 和下面的 <code>新记录创建表单</code> 代码类似</p>\n</blockquote>\n<h4><code>新记录创建表单</code> 代码类似</h4>\n<pre><code>onst FORM_FIELDS: Array&#x3C;FormField> = [\n  { key: 'serial_code', label: '编码',    required: true },\n  { key: 'name',        label: '名称',    required: true },\n  { key: 'title',       label: '标题',    required: true },\n  { key: 'subtitle',    label: '副标题',  required: true },\n  { key: 'richtext',    label: '资料',                        type: 'RICHTEXT' },\n  { key: 'limit',       label: '数量限制',required: true,     type: 'NUMBER' },\n  { key: 'serial_code', label: '模版编码',required: true,     type: 'DB_SELECT', option: {\n    apiUrl: 'contents',\n    keyField: 'serial_code',\n    valueField: 'serial_code',\n    labelField: 'name',\n    queryPayload: { criteria: {\n      category: 'CT_FORM',\n    } },\n  }},\n  { key: 'comments',    label: '备注',    },\n];\n\n... \nexport const DetailsBasic: React.FC&#x3C;ISDetailsCommonProps> = ({slug, tab, details, onUpdate}) => {\n  const fields = buildFields(slug);\n  return (\n    !fields ? null :\n    &#x3C;FormPlus layout='vertical'\n      fields ={fields} \n      initialValues={details} \n      onSubmit={onUpdate}\n    />\n  )\n}\n</code></pre>\n<h4><code>批量更新表单</code> 和 上述类似</h4>\n<blockquote>\n<p>表单的输入类型支持：<code>文本</code>、<code>数字</code>、<code>固定选择项</code>、<code>动态选择项</code>（从数据库获取备选项）、<code>时间</code>、<code>日期</code>、<code>文件</code>、<code>图片</code>，等等</p>\n</blockquote>"}},"staticQueryHashes":["2718502863","3159585216","847266990"]}