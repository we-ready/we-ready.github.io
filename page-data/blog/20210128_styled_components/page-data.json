{
    "componentChunkName": "component---src-templates-blog-js",
    "path": "/blog/20210128_styled_components",
    "result": {"pageContext":{"frontmatter":{"id":"20210128_styled_components","title":"styled-components 让 React 如虎添翼","subtitle":"在 React 的 jsx 基础上，styled-components 通过 ES 的模板字符串 + Tag，进一步的将 `css` 整合纳入了 `js`，实现了样式的 组件化、可编程","subject":"CSS-in-JS","authors":"Chris Wei","keywords":"styled-components","tags":"react;css;sass;less;styled-components;CSs-in-JS","category":"概念理解","cover":"https://styled-components.com/logo.png","videos":"https://qiniuargus.weready.online/blog/sharing/video/2022-03-17-styled-components.mp4","created_when":"2021-01-28","updated_when":"2022-03-17","level":100},"excerpt":"# styled-components 入…\n","html":"<h1>styled-components 入门与动手实践</h1>\n<h2>styled-components 是什么</h2>\n<blockquote>\n<p>将 <code>css</code> 样式和 <code>html</code> 标签封装成 <code>react</code> 组件</p>\n</blockquote>\n<ul>\n<li><code>react</code> 通过 <code>jsx</code> 将 <code>HTML</code> 和 <code>JS</code> 进行整合，让 <code>HTML</code> 和 <code>JS</code> 实现你中有我，我中有你，实现了 <code>HTML</code>：模块化、可编程</li>\n<li><code>styled-components</code> 通过 <code>ES</code> 的模板字符串、<code>Tag</code>，进一步的将 <code>css</code> 整合纳入了 <code>js</code>，实现了 <code>css</code>：组件化、可编程</li>\n</ul>\n<blockquote>\n<p>有关 <code>react</code> 通过 <code>jsx</code> 统一了 <code>html</code> 和 <code>js</code> ，请参考 <a href=\"/blog/20210128_react\">React 101</a></p>\n</blockquote>\n<h2><code>react</code> 如何设置样式</h2>\n<ul>\n<li>创建 <code>react</code> 项目</li>\n</ul>\n<pre><code>npx create-react-app mydemo\n</code></pre>\n<ul>\n<li><code>App.jsx</code></li>\n</ul>\n<pre><code>... ...\n\nimport './App.css';\n\nfunction App() {\n  return (\n    &#x3C;div className=\"App\">\n      &#x3C;header className=\"App-header\">\n        &#x3C;img src={logo} className=\"App-logo\" alt=\"logo\" />\n        &#x3C;a\n          className=\"App-link\"\n          ... ...\n        >\n    ... ...\n</code></pre>\n<ul>\n<li><code>App.css</code></li>\n</ul>\n<pre><code>.App { ... ... }\n.App-logo { ... ... }\n@media (prefers-reduced-motion: no-preference) {\n  .App-logo {\n    animation: ... ...\n  }\n}\n.App-header { ... ... }\n.App-link { ... ... }\n@keyframes App-logo-spin { ... ... }\n</code></pre>\n<blockquote>\n<p>以上代码可以看到，基础的 <code>react</code>，<code>css</code> 还仍然是割裂的。需要独立定义样式文件，然后在 <code>jsx</code> 中通过 <code>className</code> 指定样式；而且，没有可变成能力；</p>\n</blockquote>\n<blockquote>\n<p>其他方案，比如 <code>sass</code>、<code>less</code>、<code>module css</code>、<code>css 变量</code>，有增强，但没有从本质上解决问题，而且需要付出比较大的额外成本</p>\n</blockquote>\n<h2><code>styled-components</code> 的功能概要</h2>\n<blockquote>\n<p>将 <code>css</code> 通过 <code>模板字符串</code> + <code>Tag</code> 纳入了 <code>jsx</code> 体系（<code>CSS-in-JS</code>）</p>\n</blockquote>\n<ul>\n<li>仍然兼容 <code>className</code></li>\n<li>自动处理 <code>-moz</code>, <code>-webkit</code> 等浏览器兼容</li>\n<li>样式继承</li>\n<li>支持主题</li>\n<li>全局样式</li>\n<li>可动态配置的样式参数</li>\n<li>可动态配置的动画参数</li>\n</ul>\n<h4>分解动作逐一说明</h4>\n<ul>\n<li>安装</li>\n</ul>\n<pre><code>yarn add styled-components\n</code></pre>\n<ul>\n<li>告别无意义的原始 <code>html</code> 标签（尤其是 <code>div</code> 满天飞）</li>\n</ul>\n<pre><code>const LinkButton = styled.a``\n</code></pre>\n<blockquote>\n<p>浏览器调试模式，检查编译后的结果</p>\n</blockquote>\n<ul>\n<li><code>class</code> 命名避免冲突</li>\n</ul>\n<pre><code>  &#x26; span {\n    font-weight: 700;\n  }\n</code></pre>\n<ul>\n<li><code>css</code> 类似的选择器语法</li>\n</ul>\n<pre><code>  &#x26;:hover {\n    box-shadow: \n      0px 9px 12px rgba(0, 0, 0, 0.14),\n      0px 3px 16px rgba(0, 0, 0, 0.12),\n      0px 5px 6px rgba(0, 0, 0, 0.2);\n  }\n</code></pre>\n<pre><code>  &#x26;.class-name\n  &#x26; ~ &#x26;\n  &#x26; + &#x26;\n</code></pre>\n<ul>\n<li>告别无意义的原始 <code>html</code> 标签（尤其是 <code>div</code> 满天飞）</li>\n</ul>\n<pre><code>  cursor: pointer;\n  color: white;\n  background: linear-gradient(#00f, #00a);\n  border-radius: 6px;\n  border: none;\n</code></pre>\n<ul>\n<li>样式参数动态可编程</li>\n</ul>\n<pre><code>  height: ${props => props.size};\n  line-height: ${props => props.size};\n  font-size: ${props => `calc(${props.size} - 8px);`};\n</code></pre>\n<blockquote>\n<p>利用模板字符串的嵌套</p>\n</blockquote>\n<ul>\n<li>多态（变种）</li>\n</ul>\n<pre><code>  ${props => props.frame &#x26;&#x26; css`\n    color: black;\n    background: white;\n    border: 1px solid #00f;\n  `}\n  ${props => props.disabled &#x26;&#x26; css`\n    color: #333;\n    background: #777;\n    cursor: not-allowed;\n  `}\n</code></pre>\n<ul>\n<li>继承</li>\n</ul>\n<blockquote>\n<p>相当于 <code>sass</code> <code>less</code> 中的 <code>mixin</code>，但完全是 <code>js</code> 风格和思维</p>\n</blockquote>\n<ul>\n<li>全局样式</li>\n</ul>\n<p><code>index.tsx</code></p>\n<pre><code>import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  background: transparent;\n\n  .debug-r {\n    outline: 1px solid #f00;\n  }\n\n  img, iframe {\n    loading: lazy;\n  }\n}\n</code></pre>\n<ul>\n<li>动效</li>\n</ul>\n<pre><code>const rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst Rotate = styled.div`\n  display: inline-block;\n  animation: ${rotate} 2s linear infinite;\n`;\n</code></pre>\n<h4><code>typescript</code></h4>\n<blockquote>\n<p>定义 <code>interface</code></p>\n</blockquote>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://styled-components.com/\">Styled-Components 官网</a></li>\n<li><a href=\"/blog/20210128101_2_react\">React 101</a></li>\n<li><a href=\"/watch?v=iP_HqoCuRI0&#x26;t=5941s\">React Website Using Styled Components - Beginner React JS Project Fully Responsive</a></li>\n</ul>\n<blockquote>\n<p>Visual primitives for the component age</p>\n</blockquote>"}},
    "staticQueryHashes": ["3159585216","3208650349","3659731985"]}