{
    "componentChunkName": "component---src-templates-blog-js",
    "path": "/blog/20210130002_frp",
    "result": {"pageContext":{"frontmatter":{"id":"20210130002_frp","title":"通过 frp 实现内网穿透","subtitle":"开发某些微信、淘宝功能时，第三方服务器需要访问公网IP，因此，本地的开发环境，也需要具备暴露在公网的能力。","subject":"devops","authors":"Chris Wei","keywords":"内网穿透","tags":"frp","category":"指导手册","cover":"https://media.inkscape.org/media/resources/file/Gears_8IWk3lq.svg","videos":null,"created_when":"2021-01-30T00:00:00.000Z","updated_when":"2021-01-30T00:00:00.000Z","level":200},"excerpt":"# 通过 frp 实现内网穿透\n\n# Install Server Side…\n","html":"<h1>通过 frp 实现内网穿透</h1>\n<h2>Install Server Side Service</h2>\n<pre><code>wget https://github.com/fatedier/frp/releases/download/v0.32.0/frp_0.32.0_linux_amd64.tar.gz\n</code></pre>\n<pre><code>tar -zxvf frp_0.32.0_linux_amd64.tar.gz\n</code></pre>\n<pre><code>cd frp_0.32.0_linux_amd64\ncp frps.ini frps.bak\nvi frps.ini\n</code></pre>\n<pre><code># frps.ini\n[common]\nbind_port = 7000\nvhost_http_port = 80\n</code></pre>\n<pre><code>vi start.sh\n</code></pre>\n<pre><code>#!/bin/bash\n# start frp service\n\n./frps -c ./frps.ini\n</code></pre>\n<h2>Start frp Service</h2>\n<pre><code>sh start.sh\n</code></pre>\n<h2>Install Client Side Application</h2>\n<ul>\n<li>download <code>https://github.com/fatedier/frp/releases/download/v0.32.0/frp_0.32.0_windows_amd64.zip</code></li>\n<li>unzip</li>\n<li>backup frpc.ini ==>> frpc.bak</li>\n</ul>\n<h2>Config</h2>\n<pre><code># frpc.ini\n[common]\nserver_addr = x.x.x.x                   # server IP\nserver_port = 7000\n\n[web]\ntype = http\nlocal_port = 3000\ncustom_domains = www.yourdomain.com     # domain\n</code></pre>\n<h2>Start Client</h2>\n<blockquote>\n<p>save as bat file</p>\n</blockquote>\n<pre><code>frpc -c frpc.ini\n</code></pre>\n<h2>---------------- 分割线 以下是 2020-03-17 时的快照 ------------------------------------</h2>\n<p>内容来自 <a href=\"https://github.com/fatedier/frp\">frp</a> 的 <a href=\"https://github.com/fatedier/frp/blob/master/README_zh.md\">readme</a> 文档。</p>\n<h2>frp</h2>\n<p><a href=\"https://travis-ci.org/fatedier/frp\"><img src=\"https://travis-ci.org/fatedier/frp.svg?branch=master\" alt=\"Build Status\"></a></p>\n<p><a href=\"README.md\">README</a> | <a href=\"README_zh.md\">中文文档</a></p>\n<p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。</p>\n<h3>目录</h3>\n<!-- vim-markdown-toc GFM -->\n<ul>\n<li><a href=\"#%E5%BC%80%E5%8F%91%E7%8A%B6%E6%80%81\">开发状态</a></li>\n<li><a href=\"#%E6%9E%B6%E6%9E%84\">架构</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B\">使用示例</a>\n<ul>\n<li><a href=\"#%E9%80%9A%E8%BF%87-ssh-%E8%AE%BF%E9%97%AE%E5%85%AC%E5%8F%B8%E5%86%85%E7%BD%91%E6%9C%BA%E5%99%A8\">通过 ssh 访问公司内网机器</a></li>\n<li><a href=\"#%E9%80%9A%E8%BF%87%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E9%83%A8%E7%BD%B2%E4%BA%8E%E5%86%85%E7%BD%91%E7%9A%84-web-%E6%9C%8D%E5%8A%A1\">通过自定义域名访问部署于内网的 web 服务</a></li>\n<li><a href=\"#%E8%BD%AC%E5%8F%91-dns-%E6%9F%A5%E8%AF%A2%E8%AF%B7%E6%B1%82\">转发 DNS 查询请求</a></li>\n<li><a href=\"#%E8%BD%AC%E5%8F%91-unix-%E5%9F%9F%E5%A5%97%E6%8E%A5%E5%AD%97\">转发 Unix 域套接字</a></li>\n<li><a href=\"#%E5%AF%B9%E5%A4%96%E6%8F%90%E4%BE%9B%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E4%BB%B6%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1\">对外提供简单的文件访问服务</a></li>\n<li><a href=\"#%E4%B8%BA%E6%9C%AC%E5%9C%B0-http-%E6%9C%8D%E5%8A%A1%E5%90%AF%E7%94%A8-https\">为本地 HTTP 服务启用 HTTPS</a></li>\n<li><a href=\"#%E5%AE%89%E5%85%A8%E5%9C%B0%E6%9A%B4%E9%9C%B2%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1\">安全地暴露内网服务</a></li>\n<li><a href=\"#%E7%82%B9%E5%AF%B9%E7%82%B9%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F\">点对点内网穿透</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%8A%9F%E8%83%BD%E8%AF%B4%E6%98%8E\">功能说明</a>\n<ul>\n<li><a href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">配置文件</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A8%A1%E7%89%88%E6%B8%B2%E6%9F%93\">配置文件模版渲染</a></li>\n<li><a href=\"#dashboard\">Dashboard</a></li>\n<li><a href=\"#admin-ui\">Admin UI</a></li>\n<li><a href=\"#%E7%9B%91%E6%8E%A7\">监控</a>\n<ul>\n<li><a href=\"#prometheus\">Prometheus</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81\">客户端身份验证</a>\n<ul>\n<li><a href=\"#token\">Token</a></li>\n<li><a href=\"#oidc\">OIDC</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%8A%A0%E5%AF%86%E4%B8%8E%E5%8E%8B%E7%BC%A9\">加密与压缩</a>\n<ul>\n<li><a href=\"#tls\">TLS</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%83%AD%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">客户端热加载配置文件</a></li>\n<li><a href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9F%A5%E7%9C%8B%E4%BB%A3%E7%90%86%E7%8A%B6%E6%80%81\">客户端查看代理状态</a></li>\n<li><a href=\"#%E7%AB%AF%E5%8F%A3%E7%99%BD%E5%90%8D%E5%8D%95\">端口白名单</a></li>\n<li><a href=\"#%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8\">端口复用</a></li>\n<li><a href=\"#%E9%99%90%E9%80%9F\">限速</a>\n<ul>\n<li><a href=\"#%E4%BB%A3%E7%90%86%E9%99%90%E9%80%9F\">代理限速</a></li>\n</ul>\n</li>\n<li><a href=\"#tcp-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8\">TCP 多路复用</a></li>\n<li><a href=\"#%E5%BA%95%E5%B1%82%E9%80%9A%E4%BF%A1%E5%8F%AF%E9%80%89-kcp-%E5%8D%8F%E8%AE%AE\">底层通信可选 kcp 协议</a></li>\n<li><a href=\"#%E8%BF%9E%E6%8E%A5%E6%B1%A0\">连接池</a></li>\n<li><a href=\"#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1\">负载均衡</a></li>\n<li><a href=\"#%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5\">健康检查</a></li>\n<li><a href=\"#%E4%BF%AE%E6%94%B9-host-header\">修改 Host Header</a></li>\n<li><a href=\"#%E8%AE%BE%E7%BD%AE-http-%E8%AF%B7%E6%B1%82%E7%9A%84-header\">设置 HTTP 请求的 header</a></li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E7%9C%9F%E5%AE%9E-ip\">获取用户真实 IP</a>\n<ul>\n<li><a href=\"#http-x-forwarded-for\">HTTP X-Forwarded-For</a></li>\n<li><a href=\"#proxy-protocol\">Proxy Protocol</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%80%9A%E8%BF%87%E5%AF%86%E7%A0%81%E4%BF%9D%E6%8A%A4%E4%BD%A0%E7%9A%84-web-%E6%9C%8D%E5%8A%A1\">通过密码保护你的 web 服务</a></li>\n<li><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D\">自定义二级域名</a></li>\n<li><a href=\"#url-%E8%B7%AF%E7%94%B1\">URL 路由</a></li>\n<li><a href=\"#tcp-%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8%E7%B1%BB%E5%9E%8B\">TCP 端口复用类型</a></li>\n<li><a href=\"#%E9%80%9A%E8%BF%87%E4%BB%A3%E7%90%86%E8%BF%9E%E6%8E%A5-frps\">通过代理连接 frps</a></li>\n<li><a href=\"#%E8%8C%83%E5%9B%B4%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84\">范围端口映射</a></li>\n<li><a href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8F%92%E4%BB%B6\">客户端插件</a></li>\n<li><a href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%AE%A1%E7%90%86%E6%8F%92%E4%BB%B6\">服务端管理插件</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%BC%80%E5%8F%91%E8%AE%A1%E5%88%92\">开发计划</a></li>\n<li><a href=\"#%E4%B8%BA-frp-%E5%81%9A%E8%B4%A1%E7%8C%AE\">为 frp 做贡献</a></li>\n<li><a href=\"#%E6%8D%90%E5%8A%A9\">捐助</a>\n<ul>\n<li><a href=\"#%E7%9F%A5%E8%AF%86%E6%98%9F%E7%90%83\">知识星球</a></li>\n<li><a href=\"#%E6%94%AF%E4%BB%98%E5%AE%9D%E6%89%AB%E7%A0%81%E6%8D%90%E8%B5%A0\">支付宝扫码捐赠</a></li>\n<li><a href=\"#%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%8D%90%E8%B5%A0\">微信支付捐赠</a></li>\n<li><a href=\"#paypal-%E6%8D%90%E8%B5%A0\">Paypal 捐赠</a></li>\n</ul>\n</li>\n</ul>\n<!-- vim-markdown-toc -->\n<h3>开发状态</h3>\n<p>frp 仍然处于开发阶段，未经充分测试与验证，不推荐用于生产环境。</p>\n<p>master 分支用于发布稳定版本，dev 分支用于开发，您可以尝试下载最新的 release 版本进行测试。</p>\n<p><strong>目前的交互协议可能随时改变，不保证向后兼容，升级新版本时需要注意公告说明同时升级服务端和客户端。</strong></p>\n<h3>架构</h3>\n<p><img src=\"/doc/pic/architecture.png\" alt=\"architecture\"></p>\n<h3>使用示例</h3>\n<p>根据对应的操作系统及架构，从 <a href=\"https://github.com/fatedier/frp/releases\">Release</a> 页面下载最新版本的程序。</p>\n<p>将 <strong>frps</strong> 及 <strong>frps.ini</strong> 放到具有公网 IP 的机器上。</p>\n<p>将 <strong>frpc</strong> 及 <strong>frpc.ini</strong> 放到处于内网环境的机器上。</p>\n<h4>通过 ssh 访问公司内网机器</h4>\n<ol>\n<li>修改 frps.ini 文件，这里使用了最简化的配置：</li>\n</ol>\n<pre><code class=\"language-ini\"># frps.ini\n[common]\nbind_port = 7000\n</code></pre>\n<ol start=\"2\">\n<li>启动 frps：</li>\n</ol>\n<p><code>./frps -c ./frps.ini</code></p>\n<ol start=\"3\">\n<li>修改 frpc.ini 文件，假设 frps 所在服务器的公网 IP 为 x.x.x.x；</li>\n</ol>\n<pre><code class=\"language-ini\"># frpc.ini\n[common]\nserver_addr = x.x.x.x\nserver_port = 7000\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6000\n</code></pre>\n<ol start=\"4\">\n<li>启动 frpc：</li>\n</ol>\n<p><code>./frpc -c ./frpc.ini</code></p>\n<ol start=\"5\">\n<li>通过 ssh 访问内网机器，假设用户名为 test：</li>\n</ol>\n<p><code>ssh -oPort=6000 test@x.x.x.x</code></p>\n<h4>通过自定义域名访问部署于内网的 web 服务</h4>\n<p>有时想要让其他人通过域名访问或者测试我们在本地搭建的 web 服务，但是由于本地机器没有公网 IP，无法将域名解析到本地的机器，通过 frp 就可以实现这一功能，以下示例为 http 服务，https 服务配置方法相同， vhost_http_port 替换为 vhost_https_port， type 设置为 https 即可。</p>\n<ol>\n<li>修改 frps.ini 文件，设置 http 访问端口为 8080：</li>\n</ol>\n<pre><code class=\"language-ini\"># frps.ini\n[common]\nbind_port = 7000\nvhost_http_port = 8080\n</code></pre>\n<ol start=\"2\">\n<li>启动 frps：</li>\n</ol>\n<p><code>./frps -c ./frps.ini</code></p>\n<ol start=\"3\">\n<li>修改 frpc.ini 文件，假设 frps 所在的服务器的 IP 为 x.x.x.x，local_port 为本地机器上 web 服务对应的端口, 绑定自定义域名 <code>www.yourdomain.com</code>:</li>\n</ol>\n<pre><code class=\"language-ini\"># frpc.ini\n[common]\nserver_addr = x.x.x.x\nserver_port = 7000\n\n[web]\ntype = http\nlocal_port = 80\ncustom_domains = www.yourdomain.com\n</code></pre>\n<ol start=\"4\">\n<li>启动 frpc：</li>\n</ol>\n<p><code>./frpc -c ./frpc.ini</code></p>\n<ol start=\"5\">\n<li>\n<p>将 <code>www.yourdomain.com</code> 的域名 A 记录解析到 IP <code>x.x.x.x</code>，如果服务器已经有对应的域名，也可以将 CNAME 记录解析到服务器原先的域名。</p>\n</li>\n<li>\n<p>通过浏览器访问 <code>http://www.yourdomain.com:8080</code> 即可访问到处于内网机器上的 web 服务。</p>\n</li>\n</ol>\n<h4>转发 DNS 查询请求</h4>\n<p>DNS 查询请求通常使用 UDP 协议，frp 支持对内网 UDP 服务的穿透，配置方式和 TCP 基本一致。</p>\n<ol>\n<li>修改 frps.ini 文件：</li>\n</ol>\n<pre><code class=\"language-ini\"># frps.ini\n[common]\nbind_port = 7000\n</code></pre>\n<ol start=\"2\">\n<li>启动 frps：</li>\n</ol>\n<p><code>./frps -c ./frps.ini</code></p>\n<ol start=\"3\">\n<li>修改 frpc.ini 文件，设置 frps 所在服务器的 IP 为 x.x.x.x，转发到 Google 的 DNS 查询服务器 <code>8.8.8.8</code> 的 udp 53 端口：</li>\n</ol>\n<pre><code class=\"language-ini\"># frpc.ini\n[common]\nserver_addr = x.x.x.x\nserver_port = 7000\n\n[dns]\ntype = udp\nlocal_ip = 8.8.8.8\nlocal_port = 53\nremote_port = 6000\n</code></pre>\n<ol start=\"4\">\n<li>启动 frpc：</li>\n</ol>\n<p><code>./frpc -c ./frpc.ini</code></p>\n<ol start=\"5\">\n<li>通过 dig 测试 UDP 包转发是否成功，预期会返回 <code>www.google.com</code> 域名的解析结果：</li>\n</ol>\n<p><code>dig @x.x.x.x -p 6000 www.google.com</code></p>\n<h4>转发 Unix 域套接字</h4>\n<p>通过 tcp 端口访问内网的 unix域套接字(例如和 docker daemon 通信)。</p>\n<p>frps 的部署步骤同上。</p>\n<ol>\n<li>启动 frpc，启用 <code>unix_domain_socket</code> 插件，配置如下：</li>\n</ol>\n<pre><code class=\"language-ini\"># frpc.ini\n[common]\nserver_addr = x.x.x.x\nserver_port = 7000\n\n[unix_domain_socket]\ntype = tcp\nremote_port = 6000\nplugin = unix_domain_socket\nplugin_unix_path = /var/run/docker.sock\n</code></pre>\n<ol start=\"2\">\n<li>通过 curl 命令查看 docker 版本信息</li>\n</ol>\n<p><code>curl http://x.x.x.x:6000/version</code></p>\n<h4>对外提供简单的文件访问服务</h4>\n<p>通过 <code>static_file</code> 插件可以对外提供一个简单的基于 HTTP 的文件访问服务。</p>\n<p>frps 的部署步骤同上。</p>\n<ol>\n<li>启动 frpc，启用 <code>static_file</code> 插件，配置如下：</li>\n</ol>\n<pre><code class=\"language-ini\"># frpc.ini\n[common]\nserver_addr = x.x.x.x\nserver_port = 7000\n\n[test_static_file]\ntype = tcp\nremote_port = 6000\nplugin = static_file\n# 要对外暴露的文件目录\nplugin_local_path = /tmp/file\n# 访问 url 中会被去除的前缀，保留的内容即为要访问的文件路径\nplugin_strip_prefix = static\nplugin_http_user = abc\nplugin_http_passwd = abc\n</code></pre>\n<ol start=\"2\">\n<li>通过浏览器访问 <code>http://x.x.x.x:6000/static/</code> 来查看位于 <code>/tmp/file</code> 目录下的文件，会要求输入已设置好的用户名和密码。</li>\n</ol>\n<h4>为本地 HTTP 服务启用 HTTPS</h4>\n<p>通过 <code>https2http</code> 插件可以让本地 HTTP 服务转换成 HTTPS 服务对外提供。</p>\n<ol>\n<li>启用 frpc，启用 <code>https2http</code> 插件，配置如下:</li>\n</ol>\n<pre><code class=\"language-ini\"># frpc.ini\n[common]\nserver_addr = x.x.x.x\nserver_port = 7000\n\n[test_htts2http]\ntype = https\ncustom_domains = test.yourdomain.com\n\nplugin = https2http\nplugin_local_addr = 127.0.0.1:80\n\n# HTTPS 证书相关的配置\nplugin_crt_path = ./server.crt\nplugin_key_path = ./server.key\nplugin_host_header_rewrite = 127.0.0.1\nplugin_header_X-From-Where = frp\n</code></pre>\n<ol start=\"2\">\n<li>通过浏览器访问 <code>https://test.yourdomain.com</code> 即可。</li>\n</ol>\n<h4>安全地暴露内网服务</h4>\n<p>对于某些服务来说如果直接暴露于公网上将会存在安全隐患。</p>\n<p>使用 <strong>stcp(secret tcp)</strong> 类型的代理可以避免让任何人都能访问到要穿透的服务，但是访问者也需要运行另外一个 frpc。</p>\n<p>以下示例将会创建一个只有自己能访问到的 ssh 服务代理。</p>\n<p>frps 的部署步骤同上。</p>\n<ol>\n<li>启动 frpc，转发内网的 ssh 服务，配置如下，不需要指定远程端口：</li>\n</ol>\n<pre><code class=\"language-ini\"># frpc.ini\n[common]\nserver_addr = x.x.x.x\nserver_port = 7000\n\n[secret_ssh]\ntype = stcp\n# 只有 sk 一致的用户才能访问到此服务\nsk = abcdefg\nlocal_ip = 127.0.0.1\nlocal_port = 22\n</code></pre>\n<ol start=\"2\">\n<li>在要访问这个服务的机器上启动另外一个 frpc，配置如下：</li>\n</ol>\n<pre><code class=\"language-ini\"># frpc.ini\n[common]\nserver_addr = x.x.x.x\nserver_port = 7000\n\n[secret_ssh_visitor]\ntype = stcp\n# stcp 的访问者\nrole = visitor\n# 要访问的 stcp 代理的名字\nserver_name = secret_ssh\nsk = abcdefg\n# 绑定本地端口用于访问 ssh 服务\nbind_addr = 127.0.0.1\nbind_port = 6000\n</code></pre>\n<ol start=\"3\">\n<li>通过 ssh 访问内网机器，假设用户名为 test：</li>\n</ol>\n<p><code>ssh -oPort=6000 test@127.0.0.1</code></p>\n<h4>点对点内网穿透</h4>\n<p>frp 提供了一种新的代理类型 <strong>xtcp</strong> 用于应对在希望传输大量数据且流量不经过服务器的场景。</p>\n<p>使用方式同 <strong>stcp</strong> 类似，需要在两边都部署上 frpc 用于建立直接的连接。</p>\n<p>目前处于开发的初级阶段，并不能穿透所有类型的 NAT 设备，所以穿透成功率较低。穿透失败时可以尝试 <strong>stcp</strong> 的方式。</p>\n<ol>\n<li>frps 除正常配置外需要额外配置一个 udp 端口用于支持该类型的客户端:</li>\n</ol>\n<pre><code class=\"language-ini\">bind_udp_port = 7001\n</code></pre>\n<ol start=\"2\">\n<li>启动 frpc，转发内网的 ssh 服务，配置如下，不需要指定远程端口:</li>\n</ol>\n<pre><code class=\"language-ini\"># frpc.ini\n[common]\nserver_addr = x.x.x.x\nserver_port = 7000\n\n[p2p_ssh]\ntype = xtcp\n# 只有 sk 一致的用户才能访问到此服务\nsk = abcdefg\nlocal_ip = 127.0.0.1\nlocal_port = 22\n</code></pre>\n<ol start=\"3\">\n<li>在要访问这个服务的机器上启动另外一个 frpc，配置如下:</li>\n</ol>\n<pre><code class=\"language-ini\"># frpc.ini\n[common]\nserver_addr = x.x.x.x\nserver_port = 7000\n\n[p2p_ssh_visitor]\ntype = xtcp\n# xtcp 的访问者\nrole = visitor\n# 要访问的 xtcp 代理的名字\nserver_name = p2p_ssh\nsk = abcdefg\n# 绑定本地端口用于访问 ssh 服务\nbind_addr = 127.0.0.1\nbind_port = 6000\n</code></pre>\n<ol start=\"4\">\n<li>通过 ssh 访问内网机器，假设用户名为 test:</li>\n</ol>\n<p><code>ssh -oPort=6000 test@127.0.0.1</code></p>\n<h3>功能说明</h3>\n<h4>配置文件</h4>\n<p>由于 frp 目前支持的功能和配置项较多，未在文档中列出的功能可以从完整的示例配置文件中发现。</p>\n<p><a href=\"./conf/frps_full.ini\">frps 完整配置文件</a></p>\n<p><a href=\"./conf/frpc_full.ini\">frpc 完整配置文件</a></p>\n<h4>配置文件模版渲染</h4>\n<p>配置文件支持使用系统环境变量进行模版渲染，模版格式采用 Go 的标准格式。</p>\n<p>示例配置如下:</p>\n<pre><code class=\"language-ini\"># frpc.ini\n[common]\nserver_addr = {{ .Envs.FRP_SERVER_ADDR }}\nserver_port = 7000\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = {{ .Envs.FRP_SSH_REMOTE_PORT }}\n</code></pre>\n<p>启动 frpc 程序:</p>\n<pre><code>export FRP_SERVER_ADDR=\"x.x.x.x\"\nexport FRP_SSH_REMOTE_PORT=\"6000\"\n./frpc -c ./frpc.ini\n</code></pre>\n<p>frpc 会自动使用环境变量渲染配置文件模版，所有环境变量需要以 <code>.Envs</code> 为前缀。</p>\n<h4>Dashboard</h4>\n<p>通过浏览器查看 frp 的状态以及代理统计信息展示。</p>\n<p><strong>注：Dashboard 尚未针对大量的 proxy 数据展示做优化，如果出现 Dashboard 访问较慢的情况，请不要启用此功能。</strong></p>\n<p>需要在 frps.ini 中指定 dashboard 服务使用的端口，即可开启此功能：</p>\n<pre><code class=\"language-ini\">[common]\ndashboard_port = 7500\n# dashboard 用户名密码，默认都为 admin\ndashboard_user = admin\ndashboard_pwd = admin\n</code></pre>\n<p>打开浏览器通过 <code>http://[server_addr]:7500</code> 访问 dashboard 界面，用户名密码默认为 <code>admin</code>。</p>\n<p><img src=\"/doc/pic/dashboard.png\" alt=\"dashboard\"></p>\n<h4>Admin UI</h4>\n<p>Admin UI 可以帮助用户通过浏览器来查询和管理客户端的 proxy 状态和配置。</p>\n<p>需要在 frpc.ini 中指定 admin 服务使用的端口，即可开启此功能：</p>\n<pre><code class=\"language-ini\">[common]\nadmin_addr = 127.0.0.1\nadmin_port = 7400\nadmin_user = admin\nadmin_pwd = admin\n</code></pre>\n<p>打开浏览器通过 <code>http://127.0.0.1:7400</code> 访问 Admin UI，用户名密码默认为 <code>admin</code>。</p>\n<p>如果想要在外网环境访问 Admin UI，将 7400 端口映射出去即可，但需要重视安全风险。</p>\n<h4>监控</h4>\n<p>frps 当启用 Dashboard 后，会默认开启内部的监控，数据存放在内存中，每次重启进程后会清空，监控数据可以通过 dashboard 的地址发送 HTTP 请求获取。</p>\n<p>目前还支持 Prometheus 作为可选的监控系统。</p>\n<h5>Prometheus</h5>\n<p>在 <code>frps.ini</code> 中启用 Dashboard，并且设置 <code>enable_prometheus = true</code>，则通过 <code>http://{dashboard_addr}/metrics</code> 可以获取到 Prometheus 的监控数据。</p>\n<h4>客户端身份验证</h4>\n<p>目前 frpc 和 frps 之间支持两种身份验证方式，<code>token</code> 和 <code>oidc</code>。</p>\n<p>通过 <code>frpc.ini</code> 和 <code>frps.ini</code> 中 <code>[common]</code> section 的 <code>authentication_method</code> 参数配置需要使用的验证方法。</p>\n<p><code>authenticate_heartbeats = true</code> 将会在每一个心跳包中附加上鉴权信息。</p>\n<p><code>authenticate_new_work_conns = true</code> 将会在每次建立新的工作连接时附加上鉴权信息。</p>\n<h5>Token</h5>\n<p>当 <code>authentication_method = token</code>，将会启用基于 token 的验证方式。</p>\n<p>需要在 <code>frpc.ini</code> 和 <code>frps.ini</code> 的 <code>[common]</code> section 中设置相同的 <code>token</code>。</p>\n<h5>OIDC</h5>\n<p>当 <code>authentication_method = oidc</code>，将会启用基于 OIDC 的身份验证。</p>\n<p>验证流程参考 <a href=\"https://tools.ietf.org/html/rfc6749#section-4.4\">Client Credentials Grant</a></p>\n<p>启用这一验证方式，配置 <code>frpc.ini</code> 和 <code>frps.ini</code> 如下：</p>\n<pre><code class=\"language-ini\"># frps.ini\n[common]\nauthentication_method = oidc\noidc_issuer = https://example-oidc-issuer.com/\noidc_audience = https://oidc-audience.com/.default\n</code></pre>\n<pre><code class=\"language-ini\">[common]\nauthentication_method = oidc\noidc_client_id = 98692467-37de-409a-9fac-bb2585826f18 # Replace with OIDC client ID\noidc_client_secret = oidc_secret\noidc_audience = https://oidc-audience.com/.default\noidc_token_endpoint_url = https://example-oidc-endpoint.com/oauth2/v2.0/token\n</code></pre>\n<h4>加密与压缩</h4>\n<p>这两个功能默认是不开启的，需要在 frpc.ini 中通过配置来为指定的代理启用加密与压缩的功能，压缩算法使用 snappy：</p>\n<pre><code class=\"language-ini\"># frpc.ini\n[ssh]\ntype = tcp\nlocal_port = 22\nremote_port = 6000\nuse_encryption = true\nuse_compression = true\n</code></pre>\n<p>如果公司内网防火墙对外网访问进行了流量识别与屏蔽，例如禁止了 ssh 协议等，通过设置 <code>use_encryption = true</code>，将 frpc 与 frps 之间的通信内容加密传输，将会有效防止流量被拦截。</p>\n<p>如果传输的报文长度较长，通过设置 <code>use_compression = true</code> 对传输内容进行压缩，可以有效减小 frpc 与 frps 之间的网络流量，加快流量转发速度，但是会额外消耗一些 cpu 资源。</p>\n<h5>TLS</h5>\n<p>从 v0.25.0 版本开始 frpc 和 frps 之间支持通过 TLS 协议加密传输。通过在 <code>frpc.ini</code> 的 <code>common</code> 中配置 <code>tls_enable = true</code> 来启用此功能，安全性更高。</p>\n<p>为了端口复用，frp 建立 TLS 连接的第一个字节为 0x17。</p>\n<p>通过将 frps.ini 的 <code>[common]</code> 中 <code>tls_only</code> 设置为 true，可以强制 frps 只接受 TLS 连接。</p>\n<p><strong>注意: 启用此功能后除 xtcp 外，不需要再设置 use_encryption。</strong></p>\n<h4>客户端热加载配置文件</h4>\n<p>当修改了 frpc 中的代理配置，可以通过 <code>frpc reload</code> 命令来动态加载配置文件，通常会在 10 秒内完成代理的更新。</p>\n<p>启用此功能需要在 frpc 中启用 admin 端口，用于提供 API 服务。配置如下：</p>\n<pre><code class=\"language-ini\"># frpc.ini\n[common]\nadmin_addr = 127.0.0.1\nadmin_port = 7400\n</code></pre>\n<p>之后执行重启命令：</p>\n<p><code>frpc reload -c ./frpc.ini</code></p>\n<p>等待一段时间后客户端会根据新的配置文件创建、更新、删除代理。</p>\n<p><strong>需要注意的是，[common] 中的参数除了 start 外目前无法被修改。</strong></p>\n<h4>客户端查看代理状态</h4>\n<p>frpc 支持通过 <code>frpc status -c ./frpc.ini</code> 命令查看代理的状态信息，此功能需要在 frpc 中配置 admin 端口。</p>\n<h4>端口白名单</h4>\n<p>为了防止端口被滥用，可以手动指定允许哪些端口被使用，在 frps.ini 中通过 <code>allow_ports</code> 来指定：</p>\n<pre><code class=\"language-ini\"># frps.ini\n[common]\nallow_ports = 2000-3000,3001,3003,4000-50000\n</code></pre>\n<p><code>allow_ports</code> 可以配置允许使用的某个指定端口或者是一个范围内的所有端口，以 <code>,</code> 分隔，指定的范围以 <code>-</code> 分隔。</p>\n<h4>端口复用</h4>\n<p>目前 frps 中的 <code>vhost_http_port</code> 和 <code>vhost_https_port</code> 支持配置成和 <code>bind_port</code> 为同一个端口，frps 会对连接的协议进行分析，之后进行不同的处理。</p>\n<p>例如在某些限制较严格的网络环境中，可以将 <code>bind_port</code> 和 <code>vhost_https_port</code> 都设置为 443。</p>\n<p>后续会尝试允许多个 proxy 绑定同一个远端端口的不同协议。</p>\n<h4>限速</h4>\n<h5>代理限速</h5>\n<p>目前支持在客户端的代理配置中设置代理级别的限速，限制单个 proxy 可以占用的带宽。</p>\n<pre><code class=\"language-ini\"># frpc.ini\n[ssh]\ntype = tcp\nlocal_port = 22\nremote_port = 6000\nbandwidth_limit = 1MB\n</code></pre>\n<p>在代理配置中增加 <code>bandwidth_limit</code> 字段启用此功能，目前仅支持 <code>MB</code> 和 <code>KB</code> 单位。</p>\n<h4>TCP 多路复用</h4>\n<p>从 v0.10.0 版本开始，客户端和服务器端之间的连接支持多路复用，不再需要为每一个用户请求创建一个连接，使连接建立的延迟降低，并且避免了大量文件描述符的占用，使 frp 可以承载更高的并发数。</p>\n<p>该功能默认启用，如需关闭，可以在 frps.ini 和 frpc.ini 中配置，该配置项在服务端和客户端必须一致：</p>\n<pre><code class=\"language-ini\"># frps.ini 和 frpc.ini 中\n[common]\ntcp_mux = false\n</code></pre>\n<h4>底层通信可选 kcp 协议</h4>\n<p>底层通信协议支持选择 kcp 协议，在弱网环境下传输效率提升明显，但是会有一些额外的流量消耗。</p>\n<p>开启 kcp 协议支持：</p>\n<ol>\n<li>在 frps.ini 中启用 kcp 协议支持，指定一个 udp 端口用于接收客户端请求：</li>\n</ol>\n<pre><code class=\"language-ini\"># frps.ini\n[common]\nbind_port = 7000\n# kcp 绑定的是 udp 端口，可以和 bind_port 一样\nkcp_bind_port = 7000\n</code></pre>\n<ol start=\"2\">\n<li>在 frpc.ini 指定需要使用的协议类型，目前只支持 tcp 和 kcp。其他代理配置不需要变更：</li>\n</ol>\n<pre><code class=\"language-ini\"># frpc.ini\n[common]\nserver_addr = x.x.x.x\n# server_port 指定为 frps 的 kcp_bind_port\nserver_port = 7000\nprotocol = kcp\n</code></pre>\n<ol start=\"3\">\n<li>像之前一样使用 frp，需要注意开放相关机器上的 udp 的端口的访问权限。</li>\n</ol>\n<h4>连接池</h4>\n<p>默认情况下，当用户请求建立连接后，frps 才会请求 frpc 主动与后端服务建立一个连接。当为指定的代理启用连接池后，frp 会预先和后端服务建立起指定数量的连接，每次接收到用户请求后，会从连接池中取出一个连接和用户连接关联起来，避免了等待与后端服务建立连接以及 frpc 和 frps 之间传递控制信息的时间。</p>\n<p>这一功能比较适合有大量短连接请求时开启。</p>\n<ol>\n<li>首先可以在 frps.ini 中设置每个代理可以创建的连接池上限，避免大量资源占用，客户端设置超过此配置后会被调整到当前值：</li>\n</ol>\n<pre><code class=\"language-ini\"># frps.ini\n[common]\nmax_pool_count = 5\n</code></pre>\n<ol start=\"2\">\n<li>在 frpc.ini 中为客户端启用连接池，指定预创建连接的数量：</li>\n</ol>\n<pre><code class=\"language-ini\"># frpc.ini\n[common]\npool_count = 1\n</code></pre>\n<h4>负载均衡</h4>\n<p>可以将多个相同类型的 proxy 加入到同一个 group 中，从而实现负载均衡的功能。</p>\n<p>目前只支持 TCP 和 HTTP 类型的 proxy。</p>\n<pre><code class=\"language-ini\"># frpc.ini\n[test1]\ntype = tcp\nlocal_port = 8080\nremote_port = 80\ngroup = web\ngroup_key = 123\n\n[test2]\ntype = tcp\nlocal_port = 8081\nremote_port = 80\ngroup = web\ngroup_key = 123\n</code></pre>\n<p>用户连接 frps 服务器的 80 端口，frps 会将接收到的用户连接随机分发给其中一个存活的 proxy。这样可以在一台 frpc 机器挂掉后仍然有其他节点能够提供服务。</p>\n<p>TCP 类型代理要求 <code>group_key</code> 相同，做权限验证，且 <code>remote_port</code> 相同。</p>\n<p>HTTP 类型代理要求 <code>group_key, custom_domains 或 subdomain 和 locations</code> 相同。</p>\n<h4>健康检查</h4>\n<p>通过给 proxy 加上健康检查的功能，可以在要反向代理的服务出现故障时，将这个服务从 frps 中摘除，搭配负载均衡的功能，可以用来实现高可用的架构，避免服务单点故障。</p>\n<p>在每一个 proxy 的配置下加上 <code>health_check_type = {type}</code> 来启用健康检查功能。</p>\n<p><strong>type</strong> 目前可选 tcp 和 http。</p>\n<p>tcp 只要能够建立连接则认为服务正常，http 会发送一个 http 请求，服务需要返回 2xx 的状态码才会被认为正常。</p>\n<p>tcp 示例配置如下：</p>\n<pre><code class=\"language-ini\"># frpc.ini\n[test1]\ntype = tcp\nlocal_port = 22\nremote_port = 6000\n# 启用健康检查，类型为 tcp\nhealth_check_type = tcp\n# 建立连接超时时间为 3 秒\nhealth_check_timeout_s = 3\n# 连续 3 次检查失败，此 proxy 会被摘除\nhealth_check_max_failed = 3\n# 每隔 10 秒进行一次健康检查\nhealth_check_interval_s = 10\n</code></pre>\n<p>http 示例配置如下：</p>\n<pre><code class=\"language-ini\"># frpc.ini\n[web]\ntype = http\nlocal_ip = 127.0.0.1\nlocal_port = 80\ncustom_domains = test.yourdomain.com\n# 启用健康检查，类型为 http\nhealth_check_type = http\n# 健康检查发送 http 请求的 url，后端服务需要返回 2xx 的 http 状态码\nhealth_check_url = /status\nhealth_check_interval_s = 10\nhealth_check_max_failed = 3\nhealth_check_timeout_s = 3\n</code></pre>\n<h4>修改 Host Header</h4>\n<p>通常情况下 frp 不会修改转发的任何数据。但有一些后端服务会根据 http 请求 header 中的 host 字段来展现不同的网站，例如 nginx 的虚拟主机服务，启用 host-header 的修改功能可以动态修改 http 请求中的 host 字段。该功能仅限于 http 类型的代理。</p>\n<pre><code class=\"language-ini\"># frpc.ini\n[web]\ntype = http\nlocal_port = 80\ncustom_domains = test.yourdomain.com\nhost_header_rewrite = dev.yourdomain.com\n</code></pre>\n<p>原来 http 请求中的 host 字段 <code>test.yourdomain.com</code> 转发到后端服务时会被替换为 <code>dev.yourdomain.com</code>。</p>\n<h4>设置 HTTP 请求的 header</h4>\n<p>对于 <code>type = http</code> 的代理，可以设置在转发中动态添加的 header 参数。</p>\n<pre><code class=\"language-ini\"># frpc.ini\n[web]\ntype = http\nlocal_port = 80\ncustom_domains = test.yourdomain.com\nhost_header_rewrite = dev.yourdomain.com\nheader_X-From-Where = frp\n</code></pre>\n<p>对于参数配置中所有以 <code>header_</code> 开头的参数(支持同时配置多个)，都会被添加到 http 请求的 header 中，根据如上的配置，会在请求的 header 中加上 <code>X-From-Where: frp</code>。</p>\n<h4>获取用户真实 IP</h4>\n<h5>HTTP X-Forwarded-For</h5>\n<p>目前只有 <strong>http</strong> 类型的代理支持这一功能，可以通过用户请求的 header 中的 <code>X-Forwarded-For</code> 来获取用户真实 IP，默认启用。</p>\n<h5>Proxy Protocol</h5>\n<p>frp 支持通过 <strong>Proxy Protocol</strong> 协议来传递经过 frp 代理的请求的真实 IP，此功能支持所有以 TCP 为底层协议的类型，不支持 UDP。</p>\n<p><strong>Proxy Protocol</strong> 功能启用后，frpc 在和本地服务建立连接后，会先发送一段 <strong>Proxy Protocol</strong> 的协议内容给本地服务，本地服务通过解析这一内容可以获得访问用户的真实 IP。所以不仅仅是 HTTP 服务，任何的 TCP 服务，只要支持这一协议，都可以获得用户的真实 IP 地址。</p>\n<p>需要注意的是，在代理配置中如果要启用此功能，需要本地的服务能够支持 <strong>Proxy Protocol</strong> 这一协议，目前 nginx 和 haproxy 都能够很好的支持。</p>\n<p>这里以 https 类型为例:</p>\n<pre><code class=\"language-ini\"># frpc.ini\n[web]\ntype = https\nlocal_port = 443\ncustom_domains = test.yourdomain.com\n\n# 目前支持 v1 和 v2 两个版本的 proxy protocol 协议。\nproxy_protocol_version = v2\n</code></pre>\n<p>只需要在代理配置中增加一行 <code>proxy_protocol_version = v2</code> 即可开启此功能。</p>\n<p>本地的 https 服务可以通过在 nginx 的配置中启用 <strong>Proxy Protocol</strong> 的解析并将结果设置在 <code>X-Real-IP</code> 这个 Header 中就可以在自己的 Web 服务中通过 <code>X-Real-IP</code> 获取到用户的真实 IP。</p>\n<h4>通过密码保护你的 web 服务</h4>\n<p>由于所有客户端共用一个 frps 的 http 服务端口，任何知道你的域名和 url 的人都能访问到你部署在内网的 web 服务，但是在某些场景下需要确保只有限定的用户才能访问。</p>\n<p>frp 支持通过 HTTP Basic Auth 来保护你的 web 服务，使用户需要通过用户名和密码才能访问到你的服务。</p>\n<p>该功能目前仅限于 http 类型的代理，需要在 frpc 的代理配置中添加用户名和密码的设置。</p>\n<pre><code class=\"language-ini\"># frpc.ini\n[web]\ntype = http\nlocal_port = 80\ncustom_domains = test.yourdomain.com\nhttp_user = abc\nhttp_pwd = abc\n</code></pre>\n<p>通过浏览器访问 <code>http://test.yourdomain.com</code>，需要输入配置的用户名和密码才能访问。</p>\n<h4>自定义二级域名</h4>\n<p>在多人同时使用一个 frps 时，通过自定义二级域名的方式来使用会更加方便。</p>\n<p>通过在 frps 的配置文件中配置 <code>subdomain_host</code>，就可以启用该特性。之后在 frpc 的 http、https 类型的代理中可以不配置 <code>custom_domains</code>，而是配置一个 <code>subdomain</code> 参数。</p>\n<p>只需要将 <code>*.{subdomain_host}</code> 解析到 frps 所在服务器。之后用户可以通过 <code>subdomain</code> 自行指定自己的 web 服务所需要使用的二级域名，通过 <code>{subdomain}.{subdomain_host}</code> 来访问自己的 web 服务。</p>\n<pre><code class=\"language-ini\"># frps.ini\n[common]\nsubdomain_host = frps.com\n</code></pre>\n<p>将泛域名 <code>*.frps.com</code> 解析到 frps 所在服务器的 IP 地址。</p>\n<pre><code class=\"language-ini\"># frpc.ini\n[web]\ntype = http\nlocal_port = 80\nsubdomain = test\n</code></pre>\n<p>frps 和 frpc 都启动成功后，通过 <code>test.frps.com</code> 就可以访问到内网的 web 服务。</p>\n<p><strong>注：如果 frps 配置了 <code>subdomain_host</code>，则 <code>custom_domains</code> 中不能是属于 <code>subdomain_host</code> 的子域名或者泛域名。</strong></p>\n<p>同一个 http 或 https 类型的代理中 <code>custom_domains</code>  和 <code>subdomain</code> 可以同时配置。</p>\n<h4>URL 路由</h4>\n<p>frp 支持根据请求的 URL 路径路由转发到不同的后端服务。</p>\n<p>通过配置文件中的 <code>locations</code> 字段指定一个或多个 proxy 能够匹配的 URL 前缀(目前仅支持最大前缀匹配，之后会考虑正则匹配)。例如指定 <code>locations = /news</code>，则所有 URL 以 <code>/news</code> 开头的请求都会被转发到这个服务。</p>\n<pre><code class=\"language-ini\"># frpc.ini\n[web01]\ntype = http\nlocal_port = 80\ncustom_domains = web.yourdomain.com\nlocations = /\n\n[web02]\ntype = http\nlocal_port = 81\ncustom_domains = web.yourdomain.com\nlocations = /news,/about\n</code></pre>\n<p>按照上述的示例配置后，<code>web.yourdomain.com</code> 这个域名下所有以 <code>/news</code> 以及 <code>/about</code> 作为前缀的 URL 请求都会被转发到 web02，其余的请求会被转发到 web01。</p>\n<h4>TCP 端口复用类型</h4>\n<p>frp 支持将单个端口收到的连接路由到不同的代理，类似 <code>vhost_http_port</code> 和 <code>vhost_https_port</code>。</p>\n<p>目前支持的复用器只有 <code>httpconnect</code>。</p>\n<p>当在 <code>frps.ini</code> 的 <code>[common]</code> 中设置 <code>tcpmux_httpconnect_port</code>，frps 将会监听在这个端口，接收 HTTP CONNECT 请求。</p>\n<p>frps 会根据 HTTP CONNECT 请求中的 host 路由到不同的后端代理。</p>\n<p>示例配置如下：</p>\n<pre><code class=\"language-ini\"># frps.ini\n[common]\nbind_port = 7000\ntcpmux_httpconnect_port = 1337\n</code></pre>\n<pre><code class=\"language-ini\"># frpc.ini\n[common]\nserver_addr = x.x.x.x\nserver_port = 7000\n\n[proxy1]\ntype = tcpmux\nmultiplexer = httpconnect\ncustom_domains = test1\n\n[proxy2]\ntype = tcpmux\nmultiplexer = httpconnect\ncustom_domains = test2\n</code></pre>\n<p>通过上面的配置，frps 如果接收到 HTTP CONNECT 请求内容:</p>\n<pre><code>CONNECT test1 HTTP/1.1\\r\\n\\r\\n\n</code></pre>\n<p>该连接将会被路由到 proxy1 。</p>\n<h4>通过代理连接 frps</h4>\n<p>在只能通过代理访问外网的环境内，frpc 支持通过 HTTP PROXY 和 frps 进行通信。</p>\n<p>可以通过设置 <code>HTTP_PROXY</code> 系统环境变量或者通过在 frpc 的配置文件中设置 <code>http_proxy</code> 参数来使用此功能。</p>\n<p>仅在 <code>protocol = tcp</code> 时生效。</p>\n<pre><code class=\"language-ini\"># frpc.ini\n[common]\nserver_addr = x.x.x.x\nserver_port = 7000\nhttp_proxy = http://user:pwd@192.168.1.128:8080\n</code></pre>\n<h4>范围端口映射</h4>\n<p>在 frpc 的配置文件中可以指定映射多个端口，目前只支持 tcp 和 udp 的类型。</p>\n<p>这一功能通过 <code>range:</code> 段落标记来实现，客户端会解析这个标记中的配置，将其拆分成多个 proxy，每一个 proxy 以数字为后缀命名。</p>\n<p>例如要映射本地 6000-6005, 6007 这6个端口，主要配置如下：</p>\n<pre><code class=\"language-ini\"># frpc.ini\n[range:test_tcp]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 6000-6006,6007\nremote_port = 6000-6006,6007\n</code></pre>\n<p>实际连接成功后会创建 8 个 proxy，命名为 <code>test_tcp_0, test_tcp_1 ... test_tcp_7</code>。</p>\n<h4>客户端插件</h4>\n<p>默认情况下，frpc 只会转发请求到本地 tcp 或 udp 端口。</p>\n<p>客户端插件模式是为了在客户端提供更加丰富的功能，目前内置的插件有 <code>unix_domain_socket</code>、<code>http_proxy</code>、<code>socks5</code>、<code>static_file</code>。具体使用方式请查看<a href=\"#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B\">使用示例</a>。</p>\n<p>通过 <code>plugin</code> 指定需要使用的插件，插件的配置参数都以 <code>plugin_</code> 开头。使用插件后 <code>local_ip</code> 和 <code>local_port</code> 不再需要配置。</p>\n<p>使用 <strong>http_proxy</strong> 插件的示例:</p>\n<pre><code class=\"language-ini\"># frpc.ini\n[http_proxy]\ntype = tcp\nremote_port = 6000\nplugin = http_proxy\nplugin_http_user = abc\nplugin_http_passwd = abc\n</code></pre>\n<p><code>plugin_http_user</code> 和 <code>plugin_http_passwd</code> 即为 <code>http_proxy</code> 插件可选的配置参数。</p>\n<h4>服务端管理插件</h4>\n<p><a href=\"/doc/server_plugin_zh.md\">使用说明</a></p>\n<h3>开发计划</h3>\n<p>计划在后续版本中加入的功能与优化，排名不分先后，如果有其他功能建议欢迎在 <a href=\"https://github.com/fatedier/frp/issues\">issues</a> 中反馈。</p>\n<ul>\n<li>frps 记录 http 请求日志。</li>\n</ul>\n<h1>---------------- 分割线 以下是 0.21 版本时的记录 ------------------------------------</h1>\n<h1>Background Knowledge</h1>\n<p><a href=\"https://blog.csdn.net/zhangguo5/article/details/77848658?utm_source=5ibc.net&#x26;utm_medium=referral\">一分钟实现内网穿透（ngrok服务器搭建）</a></p>\n<h1>Source Code and Readme Document</h1>\n<p><a href=\"https://github.com/fatedier/frp/blob/master/README_zh.md\">github</a></p>\n<h1>Server Install</h1>\n<p><a href=\"https://blog.csdn.net/e_wsq/article/details/79405512\">frp简易安装配置说明</a></p>\n<ol>\n<li>download</li>\n</ol>\n<pre><code>wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz\n</code></pre>\n<ol start=\"2\">\n<li>unzip</li>\n</ol>\n<pre><code>tar zxvf frp_0.21.0_linux_amd64.tar.gz\n</code></pre>\n<ol start=\"3\">\n<li>config frps.ini</li>\n</ol>\n<ul>\n<li>command</li>\n</ul>\n<pre><code>vim frps.ini\n</code></pre>\n<ul>\n<li>content</li>\n</ul>\n<pre><code># frps.ini\n[common]\nbind_port = 7000\nvhost_http_port = 80\n</code></pre>\n<ol start=\"4\">\n<li>start service</li>\n</ol>\n<pre><code>./frps -c ./frps.ini\n</code></pre>\n<blockquote>\n<p>You may want to save above command as a sh batch file.</p>\n</blockquote>\n<pre><code>#!/bin/bash\n# start frp service\n\n./frps -c ./frps.ini\n</code></pre>\n<h2>Aliyun Config</h2>\n<blockquote>\n<p>设置阿里云 ECS（xxx.xxx.xxx.xxx） 安全组规则：允许 7000 端口 以及 80 端口\n阿里云域名解析 增加 A 记录：<a href=\"http://www.%5Bdomainname%5D.com\">www.[domainname].com</a> ==>xxx.xxx.xxx.xxx</p>\n</blockquote>\n<h2>Client Install</h2>\n<ol>\n<li>download</li>\n<li>config frpc.ini</li>\n</ol>\n<pre><code># frpc.ini\n[common]\nserver_addr = xxx.xxx.xxx.xxx\nserver_port = 7000\n\n[web]\ntype = http\nlocal_port = 3000\ncustom_domains = www.[domainname].com\n</code></pre>\n<blockquote>\n<p>Above is the configuration about web server. Below is the configuration about the tcp (from Xiaoyi Zhu).</p>\n</blockquote>\n<pre><code># frpc.ini\n[common]\nserver_addr = xxx.xxx.xxx.xxx\nserver_port = 7000\n\n[unix_domain_socket]\ntype = tcp\nremote_port = 3000\nplugin = unix_domain_socket\nplugin_unix_path = /var/run/docker.sock\n</code></pre>\n<ol start=\"3\">\n<li>start frp client</li>\n</ol>\n<pre><code>frpc -c frpc.ini\n</code></pre>\n<blockquote>\n<p>You may want to save above command as a bat file in the same folder of frpc.ext and frpc.ini.</p>\n</blockquote>\n<h2>Test</h2>\n<ol>\n<li>Start Web Server from local machine and listen port 3000</li>\n</ol>\n<pre><code>node app\n</code></pre>\n<ol start=\"2\">\n<li>Open Web Site from Browser</li>\n</ol>\n<blockquote>\n<p>Input '<a href=\"http://www.%5Bdomainname%5D.com:80\">http://www.[domainname].com:80</a>' in browser url address box.</p>\n</blockquote>\n<h2>Subdomain</h2>\n<p>If you want to use sub domain, here is the case:</p>\n<pre><code># frps.ini\n[common]\nbind_port = 7000\nvhost_http_port = 80\nsubdomain_host = [sub domain name].com\n</code></pre>\n<pre><code># frpc.ini\n[common]\nserver_addr = xxx.xxx.xxx.xxx\nserver_port = 7000\n\n[web]\ntype = http\nlocal_port = 3000\nsubdomain = [site name]\n</code></pre>\n<p>Example</p>\n<pre><code># frps.ini\n\n[common]\nbind_port = 7000\nvhost_http_port = 80\nsubdomain_host = frp.xxxx.com\n</code></pre>\n<pre><code># frpc.ini\n\n[common]\nserver_addr = 107.151.172.73\nserver_port = 7000\n\n[web]\ntype = http\nlocal_port = 3000\nsubdomain = atlantis\n</code></pre>\n<h2>注意</h2>\n<blockquote>\n<p>如果服务器版本和客户端版本不一致，会引发报错，导致客户端无法启动</p>\n</blockquote>\n<blockquote>\n<p>请检查最新版本的说明文档</p>\n</blockquote>"}},
    "staticQueryHashes": ["2877226700","3159585216","3659731985","3670619862"]}