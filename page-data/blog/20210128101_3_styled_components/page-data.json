{
    "componentChunkName": "component---src-templates-blog-js",
    "path": "/blog/20210128101_3_styled_components",
    "result": {"pageContext":{"frontmatter":{"id":"20210128101_3_styled_components","title":"styled-components 101","subtitle":"什么是 styled-components","subject":"CSS-in-JS","author":"Chris Wei","keywords":"fullstack","tags":"react;css;jsx;CSs-in-JS;styled-components;","category":"概念理解","cover":"https://styled-components.com/logo.png","created_when":"2021-01-28","updated_when":"2021-01-28","level":100},"excerpt":"# styled-components 1…\n","html":"<h1>styled-components 101</h1>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://styled-components.com/\">Styled-Components 官网</a></li>\n<li><a href=\"/blog/20210128101_2_react\">React 101</a></li>\n<li><a href=\"/watch?v=iP_HqoCuRI0&#x26;t=5941s\">React Website Using Styled Components - Beginner React JS Project Fully Responsive</a></li>\n</ul>\n<blockquote>\n<p>Visual primitives for the component age</p>\n</blockquote>\n<h2>styled-components 是什么</h2>\n<h4>将 <code>css</code> 样式和 <code>html</code> 标签封装成 <code>react</code> 组件</h4>\n<ul>\n<li><code>react</code> 将 <code>HTML</code> 和 <code>JS</code> 做了整合，形成了 <code>jsx</code></li>\n<li><code>styled-components</code> 进一步的将 <code>css</code> 做了进一步整合，纳入了 <code>jsx</code> 体系</li>\n</ul>\n<h4>为什么说，<code>react</code> 没有统一 <code>css</code></h4>\n<p>有关 <code>react</code> 通过 <code>jsx</code> 统一了 <code>html</code> 和 <code>js</code> 的说法，请参考 <a href=\"/blog/20210128101_2_react\">React 101</a></p>\n<p>以下代码可以看到，基础的 <code>react</code>，<code>css</code> 还仍然是割裂的。需要独立定义样式文件，然后在 <code>jsx</code> 中通过 <code>className</code> 指定样式。</p>\n<p><code>App.jsx</code></p>\n<pre><code>import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    &#x3C;div className=\"App\">\n      &#x3C;header className=\"App-header\">\n        &#x3C;img src={logo} className=\"App-logo\" alt=\"logo\" />\n        &#x3C;a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        &#x3C;/a>\n      &#x3C;/header>\n    &#x3C;/div>\n  );\n}\n\nexport default App;\n</code></pre>\n<p><code>App.css</code></p>\n<pre><code>.App {\n  text-align: center;\n}\n\n.App-logo {\n  height: 40vmin;\n  pointer-events: none;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  .App-logo {\n    animation: App-logo-spin infinite 20s linear;\n  }\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n</code></pre>\n<h2>其他好处</h2>\n<p>上述的，将 <code>css</code> 纳入 <code>jsx</code> 体系（<code>CSS-in-JS</code>），是 <code>styled-components</code> 最大的价值。除此之外，<code>styled-components</code> 还有很多其他价值，取代并超越了 <code>sass</code>，<code>less</code>，<code>module css</code>，等其他解决方案。</p>\n<ul>\n<li>自动处理 <code>-moz</code>, <code>-webkit</code> 等浏览器兼容；</li>\n<li>仍然兼容 <code>className</code>；</li>\n<li>样式继承；</li>\n<li>支持主题；</li>\n<li>可动态配置的样式参数；</li>\n<li>可动态配置的动画参数；</li>\n</ul>\n<h2>入门</h2>\n<pre><code>const Button = styled.a`\n  /* This renders the buttons above... Edit me! */\n  display: inline-block;\n  border-radius: 3px;\n  padding: 0.5rem 0;\n  margin: 0.5rem 1rem;\n  width: 11rem;\n  background: transparent;\n  color: white;\n  border: 2px solid white;\n\n  /* The GitHub button is a primary button\n   * edit this to target it specifically! */\n  ${props => props.primary &#x26;&#x26; css`\n    background: white;\n    color: black;\n  `}\n`\n\nrender(\n  &#x3C;div>\n    &#x3C;Button\n      href=\"https://github.com/styled-components/styled-components\"\n      target=\"_blank\"\n      rel=\"noopener\"\n      primary\n    >\n      GitHub\n    &#x3C;/Button>\n\n    &#x3C;Button as={Link} href=\"/docs\">\n      Documentation\n    &#x3C;/Button>\n  &#x3C;/div>\n)\n</code></pre>\n<blockquote>\n<p>上面的代码可以看到，<code>css</code> 样式，被组件化了，被纳入到 <code>jsx</code> 了。而且，在进一步了解 <code>styled-components</code> 之后会发现，<code>styled-components</code> 支持样式接受组件的参数，从而使得样式也是可编程的，动态的，受控的。</p>\n</blockquote>\n<pre><code>const Button = styled.button`\n  /* Adapt the colors based on primary prop */\n  background: ${props => props.primary ? \"palevioletred\" : \"white\"};\n  color: ${props => props.primary ? \"white\" : \"palevioletred\"};\n\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\n</code></pre>\n<p>除此之外，<code>styled-components</code> 还支持样式的继承，等等高级操作。这实际上相当于 <code>sass</code> <code>less</code> 中的 <code>mixin</code>，也类似于 <code>js</code> 中的 <code>class</code> 和 <code>interface</code> 的继承。\n这样，我们可以丢弃 <code>sass</code> 和 <code>less</code>。丢弃 <code>sass</code> 和 <code>less</code>，意味着少了很多 <code>babel</code> 预处理相关的额外工作，意味着减少很大的学习成本。（<code>styled-components</code> 的学习成本，要远远小于 [ <code>sass</code> | <code>less</code> ] + <code>babel</code> ）</p>"}},
    "staticQueryHashes": ["1280648994","3159585216"]}