{
    "componentChunkName": "component---src-templates-blog-js",
    "path": "/blog/20210308000_set_input_auto_fit_content",
    "result": {"pageContext":{"frontmatter":{"id":"20210308000_set_input_auto_fit_content","title":"如何设置 input 随着输入的内容而自适应宽度","subtitle":"input 的宽度受 size 限制，很多解决方案是通过 js 代码去计算的","subject":"React","authors":"Chris Wei","keywords":"react;input;auto fit;useEffect;useMemo","tags":"input;width;","category":"经验技巧","cover":"https://media.inkscape.org/media/resources/file/Ladybug-icon.png","created_when":"2021-03-08","updated_when":"2021-03-08","level":200},"excerpt":"# 如何设置 input 随着输入的内容而…\n","html":"<h1>如何设置 input 随着输入的内容而自适应宽度</h1>\n<h2>方法 1：利用一个隐藏的 <code>span</code></h2>\n<pre><code>const calculateWidth = (instance) => {\n  return !instance ? null : window.getComputedStyle(instance).getPropertyValue(\"width\");\n}\n\nconst Component = ({placeholder}) => {\n  const refSpan = useRef(null);\n  const [spanWidth, setSpanWidth] = useState(null)\n  const [input, setInput] = useState&#x3C;string>('');\n  \n  const onChange = (e) => { \n    setInput(e.target.value) \n  }\n\n  useEffect(() => {\n    setSpanWidth(calculateWidth(refSpan?.current))\n  }, [refSpan?.current, input]);\n\n  return (\n    &#x3C;InputFieldContainer {...restProps} >\n      &#x3C;InputContainer validInput={!!input} >\n        &#x3C;SpanHelper ref={refSpan} className=\"debug\">{input || placeholder}&#x3C;/SpanHelper>\n        &#x3C;InputPrefix className=\"debug\">$&#x3C;/InputPrefix>\n        &#x3C;InputStyled className=\"debug\" type={ type || 'text' } name={name} placeholder= {placeholder}\n          value={input}\n          width={spanWidth || 'auto'}\n          onChange={onChange}\n        />\n\n</code></pre>\n<blockquote>\n<p><code>useMemo</code> 会在渲染前执行\n<code>useEffect</code> 会在渲染后执行</p>\n</blockquote>\n<h2>方法 2：利用 <code>canvas</code> 内置的 <code>measureText</code> 方法</h2>\n<blockquote>\n<p>未成功：计算的结果，原小于正确的值</p>\n</blockquote>\n<pre><code>const calculateWidth = (instance, font, text) => {\n  console.log('calculateWidth: ', instance, text);\n  const context = instance?.getContext(\"2d\");\n  context.font= font || \"16px Arial\";\n  context?.fillText(text, 0, 0)\n  return Math.ceil(context?.measureText(text).width);\n}\n\nconst refCanvas = useRef(null);\nconst [input, setInput] = useState&#x3C;string>('');\n\nconst inputWidth = useMemo(()=> {\n  return calculateWidth(refCanvas?.current, '16px Roboto', input || placeholder)\n}, [refCanvas?.current, input]);\n\n\nreturn(\n  ...\n      &#x3C;InputContainer validInput={!!input} >\n        &#x3C;CanvasHelper ref={refCanvas} />\n        &#x3C;InputPrefix className=\"debug\">$&#x3C;/InputPrefix>\n        &#x3C;InputStyled className=\"debug\" type={ type || 'text' } name={name} placeholder= {placeholder}\n          value={input}\n          width={`${inputWidth}px`}\n          onChange={onChange}\n        />\n\n</code></pre>"}},
    "staticQueryHashes": ["3159585216","3208650349","3659731985"]}