{"componentChunkName":"component---src-templates-blog-js","path":"/blog/20210206101_redisearch","result":{"pageContext":{"frontmatter":{"id":"20210206101_redisearch","title":"redisearch 101","subtitle":"全文搜索在各种 web 应用中，逐渐成为标配。应对大型系统，ES 也许更加适合，而面对中小型项目，redisearch也许是一种更加适合的方案。","subject":"redisearch","author":"Chis Wei","keywords":"全文搜索;自动补全;反向索引","tags":"redis;redislabs;redisearch","category":"概念理解","cover":"https://oss.redislabs.com/redisearch/img/logo.svg","created_when":"2021-02-06","updated_when":"2021-02-06","level":100},"excerpt":" redisearch 101\n\n 参考\n\n-   [gitee mirror of red…](<>)\n","html":"<h1>redisearch 101</h1>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://gitee.com/mirrors/redisearch\">gitee mirror of redisearch repo</a></li>\n<li><a href=\"https://github.com/RediSearch/redisearch-getting-started\">getting started</a></li>\n<li><a href=\"https://oss.redislabs.com/redisearch/\">redislabs</a></li>\n<li><a href=\"https://university.redislabs.com/courses/ru201/\">RU201: RediSearch</a></li>\n<li><a href=\"https://github.com/redislabs-training/ru203/blob/main/README.md\">course material</a></li>\n</ul>\n<h2>RU201: RediSearch</h2>\n<blockquote>\n<p>可以在 <code>redislabs university</code> 注册并完成相关课程</p>\n</blockquote>\n<h3>Set Up RediSearch and Loading the Data （本地环境）</h3>\n<ol>\n<li>启动装有 <code>docker compose</code> 的 <code>VMWare CentOS</code> 服务器</li>\n<li>通过 <code>XShell</code> 连接服务器</li>\n<li>启动 <code>redis</code> 实例（服务器上之前没有相关镜像，启动过程会自动下载并安装，安装需要一些时间。）</li>\n</ol>\n<p>✨🔥⚠️💯💎</p>\n<pre><code>docker run -it --rm --name redis-search-2 -p 6379:6379  redislabs/redisearch:2.0.5\n</code></pre>\n<ol start=\"4\">\n<li>从代码库下载试验数据 <code>commands.redis</code>，并上传到服务器</li>\n</ol>\n<pre><code># rz\n</code></pre>\n<ol start=\"5\">\n<li>加载试验数据</li>\n</ol>\n<p>✨🔥⚠️💯💎</p>\n<pre><code>docker exec -i redis-search-2 redis-cli &#x3C; commands.redis > output.txt\n</code></pre>\n<ol start=\"6\">\n<li>检查 <code>output.txt</code></li>\n</ol>\n<pre><code>grep Invalid output.txt\n</code></pre>\n<blockquote>\n<p>确保没有任何 <code>invalid</code> 数据。（否则，说明环境没有正确安装）</p>\n</blockquote>\n<h3>查询结构化数据</h3>\n<h4>基本语法</h4>\n<pre><code>@[field]:{[keyword]}\n</code></pre>\n<h4>转译字符</h4>\n<pre><code>\\\\\n</code></pre>\n<h4>练习</h4>\n<ul>\n<li>连接 <code>docker</code></li>\n</ul>\n<p>✨🔥⚠️💯💎</p>\n<pre><code>docker exec -it redis-search-2 redis-cli\n</code></pre>\n<ul>\n<li>创建索引</li>\n</ul>\n<p>✨🔥⚠️💯💎</p>\n<pre><code>FT.CREATE books-idx ON HASH PREFIX 1 ru203:book:details: SCHEMA isbn TAG SORTABLE title TEXT WEIGHT 2.0 SORTABLE subtitle TEXT SORTABLE thumbnail TAG NOINDEX description TEXT SORTABLE published_year NUMERIC SORTABLE average_rating NUMERIC SORTABLE authors TEXT SORTABLE categories TAG SEPARATOR \";\" author_ids TAG SEPARATOR \";\"\n\nFT.CREATE users-idx ON HASH PREFIX 1 ru203:user:details: SCHEMA first_name TEXT SORTABLE last_name TEXT SORTABLE email TAG SORTABLE escaped_email TEXT NOSTEM SORTABLE user_id TAG SORTABLE last_login NUMERIC SORTABLE\n\nFT.CREATE authors-idx ON HASH PREFIX 1 ru203:author:details: SCHEMA name TEXT SORTABLE author_id TAG SORTABLE\n\nFT.CREATE authors-books-idx ON HASH PREFIX 1 ru203:author:books: SCHEMA book_isbn TAG SORTABLE author_id TAG SORTABLE\n\nFT.CREATE checkouts-idx ON HASH PREFIX 1 ru203:book:checkout: SCHEMA user_id TAG SORTABLE book_isbn TAG SORTABLE checkout_date NUMERIC SORTABLE return_date NUMERIC SORTABLE checkout_period_days NUMERIC SORTABLE geopoint GEO\n</code></pre>\n<blockquote>\n<p>每次退出 docker，相关命令需要重新执行</p>\n</blockquote>\n<ul>\n<li>查找数据（<code>String</code>类型）</li>\n</ul>\n<pre><code>FT.SEARCH books-idx \"@isbn:{9781577312093}\"\n\nFT.SEARCH authors-idx \"@author_id:{690}\"\n\nFT.SEARCH books-idx \"@author_ids:{690}\" RETURN 1 title\n\nFT.SEARCH books-idx \"@categories:{Fantasy}\"\n</code></pre>\n<blockquote>\n<p>对于字符串查询，最有效的数据类型是 <code>TAG</code></p>\n</blockquote>\n<ul>\n<li>查找数据（<code>Number</code>类型）</li>\n</ul>\n<pre><code>FT.SEARCH books-idx \"@average_rating:[4.5 5]\" RETURN 1 title\n\nFT.SEARCH books-idx \"@average_rating:[0 1]\" RETURN 1 title\n\nFT.SEARCH books-idx \"@average_rating:[4 +inf] @published_year:[2015 +inf]\" RETURN 1 title\n\nFT.SEARCH books-idx \"@average_rating:[-inf 3] @published_year:[-inf (2000]\" RETURN 1 title\n</code></pre>\n<blockquote>\n<p><code>inf</code> 表示无穷</p>\n</blockquote>\n<blockquote>\n<p><code>)(</code> 表示不包含（缺省查询范围，会包含两端）</p>\n</blockquote>\n<ul>\n<li>查找数据（<code>Date</code> <code>Time</code> 类型）</li>\n</ul>\n<pre><code>FT.SEARCH users-idx \"@last_login:[1607693100 +inf]\"\n\nFT.SEARCH users-idx \"@last_login:[-inf (1607693100]\"\n</code></pre>\n<p>✨🔥⚠️💯💎</p>\n<blockquote>\n<p><a href=\"http://www.unixtimestampconverter.com/\">A simple converter tool for Unix Timestamps</a></p>\n</blockquote>\n<ul>\n<li>查找数据（<code>Boolean Logic</code> 类型）</li>\n</ul>\n<pre><code>FT.SEARCH books-idx \"dogs cats\"\n\nFT.SEARCH books-idx \"dogs|cats\"\n\nFT.SEARCH books-idx \"dogs -cats\"\n</code></pre>\n<blockquote>\n<p><code>与</code> <code>或</code> <code>非</code></p>\n</blockquote>\n<pre><code>FT.SEARCH books-idx \"@title:Meridian | Orchard\"\n\nFT.SEARCH books-idx \"@authors:rowling @title:goblet\"\n\nFT.SEARCH books-idx \"@authors:rowling | @title:potter\"\n\nFT.SEARCH books-idx \"@authors:tolkien -@title:ring\"\n</code></pre>\n<pre><code>FT.SEARCH books-idx \"@authors:'Stephen King' @published_year:[1980 1990]\"\n\nFT.SEARCH books-idx \"@categories:{Philosophy} @published_year:[-inf 1975] -@authors:'Arthur Koestler'\"\n\nFT.SEARCH books-idx \"@authors:'Arthur Koestler' | @authors:'Michel Foucault'\"\n</code></pre>\n<ul>\n<li>查询结果排序（<code>Sorting</code>）</li>\n</ul>\n<blockquote>\n<p>相关字段必须是 <code>SORTABLE</code> 的</p>\n</blockquote>\n<blockquote>\n<p>使用 <code>aggregation</code> 特性的时候，可以在一次搜索中对多个字段进行排序</p>\n</blockquote>\n<pre><code>FT.SEARCH books-idx \"@published_year:[2018 +inf]\" SORTBY published_year DESC\n\nFT.SEARCH books-idx \"@categories:{Juvenile Fiction}\" SORTBY published_year\n\nFT.SEARCH books-idx \"@average_rating:[4.9 5]\" SORTBY average_rating DESC\n</code></pre>\n<ul>\n<li>查询结果数量限制（<code>Limiting</code>）</li>\n</ul>\n<blockquote>\n<p>2 个参数：<code>offset</code> <code>limit</code></p>\n</blockquote>\n<blockquote>\n<p><code>offset</code> 是 <code>0</code> 开始的</p>\n</blockquote>\n<pre><code>FT.SEARCH books-idx \"@authors:Agatha Christie\" SORTBY published_year LIMIT 0 5\n\nFT.SEARCH books-idx \"@authors:Agatha Christie\" SORTBY published_year LIMIT 5 5\n\nFT.SEARCH books-idx \"@authors:Ursula K. Le Guin\" SORTBY \"published_year\" LIMIT 0 3\n\nFT.SEARCH books-idx \"@published_year:[2000 +inf]\" LIMIT 100 100\n</code></pre>\n<h3>全文搜索</h3>\n<h4>概念</h4>\n<ul>\n<li>搜索 <code>TEXT</code> 类型字段</li>\n<li><code>stemming</code>: <code>TEXT</code> 类型字段被索引时，单词会被转化为词根</li>\n</ul>\n<h4>练习</h4>\n<pre><code>FT.SEARCH books-idx \"@title:running\" RETURN 1 title\n\nFT.SEARCH books-idx \"John Le Carre\"\n\nFT.SEARCH books-idx unicorns\n</code></pre>\n<h4>模糊查询 （<code>prefix matching</code>）</h4>\n<blockquote>\n<p>模糊查询会消耗性能</p>\n</blockquote>\n<pre><code>FT.SEARCH books-idx \"atwood hand*\"\n\nFT.SEARCH books-idx \"agat* orie*\"\n</code></pre>\n<h4>逻辑、排序、限制</h4>\n<pre><code>FT.SEARCH books-idx \"dragons -wizard -magician\"\n\nFT.SEARCH books-idx \"mars @authors:heinlein\"\n\nFT.SEARCH books-idx crypto* sortby published_year\n\nFT.SEARCH books-idx murder sortby published_year limit 0 1\n</code></pre>\n<h4>高亮 概要</h4>\n<pre><code>FT.SEARCH books-idx illusion highlight\n\nFT.SEARCH books-idx \"nurture\" HIGHLIGHT FIELDS 2 title subtitle\n\nFT.SEARCH books-idx shield HIGHLIGHT SUMMARIZE FIELDS 1 description FRAGS 1 LEN 20\n\nFT.SEARCH books-idx agamemnon SUMMARIZE FIELDS 1 description FRAGS 3 LEN 25\n\nFT.SEARCH books-idx agamemnon SUMMARIZE FIELDS 1 description FRAGS 3 LEN 25 HIGHLIGHT\n</code></pre>\n<h3>聚合（aggregation）</h3>\n<h4>统计（counting）</h4>\n<pre><code>FT.AGGREGATE books-idx * GROUPBY 0 REDUCE COUNT 0 AS total\n\nFT.SEARCH books-idx \"@categories:{Fiction}\" LIMIT 0 0\n</code></pre>\n<h4>分组（grouping）</h4>\n<pre><code>FT.AGGREGATE books-idx tolkien GROUPBY 0\n\nFT.AGGREGATE checkouts-idx * GROUPBY 1 @checkout_date\n\nFT.AGGREGATE books-idx python GROUPBY 1 @categories\n\nFT.AGGREGATE books-idx marauder GROUPBY 2 @published_year @average_rating\n</code></pre>\n<h4>排序（sorting）</h4>\n<pre><code>FT.AGGREGATE users-idx * GROUPBY 2 @last_login @last_name SORTBY 1 @last_name\n\nFT.AGGREGATE books-idx \"@published_year:[1983 1983]\" GROUPBY 2 @authors @title SORTBY 2 @authors @title\n</code></pre>\n<h4>聚合（reducing）</h4>\n<pre><code>FT.AGGREGATE books-idx * GROUPBY 1 @categories REDUCE COUNT 0 AS books_count SORTBY 2 @books_count DESC\n\nFT.AGGREGATE books-idx tolkien GROUPBY 0 REDUCE AVG 1 @average_rating as avg_rating\n</code></pre>\n<p>✨🔥⚠️💯💎</p>\n<blockquote>\n<p><a href=\"https://oss.redislabs.com/redisearch/Aggregations/#supported_groupby_reducers\">Ref</a></p>\n</blockquote>\n<h4>变换（transforming）</h4>\n<pre><code>FT.AGGREGATE books-idx * APPLY \"split(@authors, ';')\" AS authors_split GROUPBY 1 @title REDUCE COUNT 1 authors_split AS num_authors FILTER \"@num_authors==2\"\n\nFT.AGGREGATE users-idx * GROUPBY 1 @last_login APPLY \"dayofweek(@last_login)\" AS day_of_week GROUPBY 1 @day_of_week SORTBY 1 @day_of_week\n\nFT.AGGREGATE users-idx * GROUPBY 2 @last_login @user_id APPLY \"day(@last_login)\" as last_login_day APPLY \"timefmt(@last_login_day)\" AS \"last_login_str\" GROUPBY 1 \"@last_login_str\" REDUCE COUNT_DISTINCT 1 \"@user_id\" AS num_logins FILTER \"@num_logins>1\"\n</code></pre>\n<h3>进阶功能</h3>\n<h4>Patial Index</h4>\n<pre><code>FT.CREATE books-older-idx ON HASH PREFIX 1 ru203:book:details: FILTER \"@published_year&#x3C;1990\" SCHEMA isbn TAG SORTABLE title TEXT WEIGHT 2.0 SORTABLE subtitle TEXT SORTABLE thumbnail TAG NOINDEX description TEXT SORTABLE published_year NUMERIC SORTABLE average_rating NUMERIC SORTABLE authors TEXT SORTABLE categories TAG SEPARATOR \";\" author_ids TAG SEPARATOR \";\"\n\nFT.CREATE books-newer-idx ON HASH PREFIX 1 ru203:book:details: FILTER \"@published_year>=1990\" SCHEMA isbn TAG SORTABLE title TEXT WEIGHT 2.0 SORTABLE subtitle TEXT SORTABLE thumbnail TAG NOINDEX description TEXT SORTABLE published_year NUMERIC SORTABLE average_rating NUMERIC SORTABLE authors TEXT SORTABLE categories TAG SEPARATOR \";\" author_ids TAG SEPARATOR \";\"\n</code></pre>\n<pre><code>FT.SEARCH books-older-idx * LIMIT 0 0\n\nFT.SEARCH books-newer-idx * LIMIT 0 0\n</code></pre>\n<pre><code>FT.CREATE books-fiction-idx ON HASH PREFIX 1 ru203:book:details: FILTER \"@categories=='Fiction'\" SCHEMA isbn TAG SORTABLE title TEXT WEIGHT 2.0 SORTABLE subtitle TEXT SORTABLE thumbnail TAG NOINDEX description TEXT SORTABLE published_year NUMERIC SORTABLE average_rating NUMERIC SORTABLE authors TEXT SORTABLE categories TAG SEPARATOR \";\" author_ids TAG SEPARATOR \";\"\n\nFT.AGGREGATE books-fiction-idx * GROUPBY 1 @authors REDUCE COUNT_DISTINCT 1 @title as total_books SORTBY 2 @total_books DESC\n</code></pre>\n<h4>WEIGHT (权重)</h4>\n<pre><code>FT.SEARCH books-idx \"((@categories:{History}) => { $weight: 10 } greek) | greek\"\n\nFT.SEARCH books-idx \"((@published_year:[2000 +inf]) => { $weight: 10 } cowboy) | cowboy\"\n</code></pre>\n<h4>Getting All</h4>\n<pre><code>FT.SEARCH users-idx *\n</code></pre>\n<blockquote>\n<p><code>*</code></p>\n</blockquote>\n<h4>Exact-Matching Punctuation (精确匹配)</h4>\n<pre><code>HMSET ru203:user:details:28 first_name \"Kelvin\" last_name \"Brown\" email \"k.brown@example.com\" escaped_email \"k\\\\.brown\\\\@example\\\\.com\" user_id \"28\"\n\nFT.SEARCH users-idx \"@escaped_email:k\\\\.brown\\\\@example\\\\.com\"\n</code></pre>\n<pre><code>HMSET ru203:user:details:1000 first_name \"Andrew\" last_name \"Brookins\" escaped_email \"a\\\\.m\\\\.brookins\\\\@example\\\\.com\" user_id \"1000\"\n\nFT.SEARCH users-idx \"@escaped_email:a\\\\.m\\\\.brookins\\\\@example\\\\.com\"\n</code></pre>\n<h4>Handling Spelling Errors （处理拼写错误）</h4>\n<blockquote>\n<p>如果第一次搜索结果是 <code>0</code>，可以尝试 <code>FT.SPELLCHECK</code> 对搜索关键词做拼写检查</p>\n</blockquote>\n<pre><code>FT.SPELLCHECK books-idx wizrds\n</code></pre>\n<pre><code>FT.SPELLCHECK books-idx monter\n\nFT.SEARCH books-idx \"%monter%\"\n</code></pre>\n<h3>Data Model</h3>\n<pre><code>    Authors\n+--------------+\n|  name        |               Author-Books\n|              |            +----------------+\n|  author_id   +------------+  author_id     |\n|              |            |                |\n+--------------+        +---+  book_isbn     |\n                        |   |                |\n    Users               |   +----------------+\n+--------------+        |\n|  first_name  |        |\n|              |        |\n|  last_name   |        |       Checkouts\n|              |        |  +------------------------+\n|  email       |   +----|--+  user_id               |\n|              |   |    |  |                        |\n|  user_id     +---+    +--+  book_isbn             |\n|              |        |  |                        |\n|  last_login  |        |  |  checkout_date         |\n|              |        |  |                        |\n+--------------+        |  |  checkout_length_days  |\n                        |  |                        |\n    Books               |  |  geopoint              |\n+--------------+        |  |                        |\n|  isbn        +--------+  +------------------------+\n|              |\n|  title       |\n|              |\n|  subtitle    |\n|              |\n|  thumbnail   |\n|              |\n|  description |\n|              |\n|  categories  |\n|              |\n|  authors     |\n|              |\n|  author_ids  |\n|              |\n+--------------+\n</code></pre>"}},"staticQueryHashes":["2718502863","3159585216","847266990"]}