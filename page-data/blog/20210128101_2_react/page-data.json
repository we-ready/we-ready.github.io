{
    "componentChunkName": "component---src-templates-blog-js",
    "path": "/blog/20210128101_2_react",
    "result": {"pageContext":{"frontmatter":{"id":"20210128101_2_react","title":"React 101","subtitle":"什么是 Reactjs","subject":"react","authors":"Chris Wei","keywords":"fullstack","tags":"react","category":"概念理解","cover":"https://pngset.com/images/logo-react-js-logo-svg-symbol-trademark-grenade-bomb-transparent-png-2691562.png","videos":"https://qiniuargus.weready.online/blog/sharing/video/2022-03-09-react-101.mp4","created_when":"2021-01-28","updated_when":"2022-03-09","level":100},"excerpt":"# Reactjs 101\n\n# 官网定义\n\n*   [React 中文网]()\n","html":"<h1>Reactjs 101</h1>\n<h2>官网定义</h2>\n<ul>\n<li><a href=\"https://react.docschina.org/\">React 中文网</a></li>\n</ul>\n<blockquote>\n<p>用于构建用户界面的 JavaScript 库</p>\n</blockquote>\n<ul>\n<li><a href=\"https://reactjs.org/\">React 官网</a></li>\n</ul>\n<blockquote>\n<p>A JavaScript library for building user interfaces</p>\n</blockquote>\n<h2>如何理解</h2>\n<ul>\n<li>\n<p>传统页面的组成包括：<code>HTML</code>, <code>CSS</code>, <code>JS</code></p>\n<ul>\n<li>最初的 <code>HTML</code> 是文档式思维方式，而非程序编码式思维</li>\n<li>多页</li>\n<li>超链接（<code>HTML</code>）</li>\n</ul>\n</li>\n<li>\n<p>前端开发遇到的哪些问题</p>\n<ul>\n<li>内容割裂、难于组织管理</li>\n<li>无法组件化、复用</li>\n</ul>\n</li>\n<li>\n<p>以往的前端开发的模式（<code>MVC</code>，<code>MVVM</code>）</p>\n</li>\n<li>\n<p>开发框架的解决思路</p>\n<ul>\n<li><code>HTML</code> 中嵌入部分 <code>JS</code> 代码，主要是访问变量（<code>HTML</code> 里面嵌入了类似 <code>{{ xxx }}</code> 的标签，引入了 数据 或 代码）</li>\n<li><code>JS</code> 代码中通过选择器定位 <code>HTML</code> 页面元素，修改相关内容、属性、样式，等等</li>\n<li>单向数据绑定 vs 双向数据绑定</li>\n</ul>\n</li>\n<li>\n<p><code>React</code> 以另外一种组织视角，对网页页面元素做了重新的调整</p>\n<ul>\n<li><code>React</code> 的思路是：扩展 <code>JS</code> 成为 <code>JSX</code> （<code>JS</code> 语法里面直接接纳 <code>HTML</code> 语法）</li>\n<li>因此，数据的流动，天然会是从代码到页面</li>\n</ul>\n</li>\n<li>\n<p>函数式组件</p>\n<ul>\n<li><code>JSX</code> 的 函数（组件） 对应传统 <code>HTML</code> 的标签</li>\n<li><code>JSX</code> 函数的入参，对应 <code>HTML</code> 标签的属性</li>\n</ul>\n</li>\n<li>\n<p><code>MVVM</code> 中的 <code>view</code></p>\n</li>\n<li>\n<p>内置引擎管理虚拟 <code>DOM</code>，并将虚拟 <code>DOM</code> 映射成浏览器页面的真实 <code>DOM</code></p>\n</li>\n<li>\n<p>静态网页 与 动态网页</p>\n</li>\n<li>\n<p>多页面网站 与 单页应用</p>\n</li>\n<li>\n<p><code>URL</code> 与 前端路由</p>\n</li>\n<li>\n<p>示例与对比（<code>hello world</code>）</p>\n</li>\n</ul>\n<blockquote>\n<p><code>Angular</code> （其他更加传统的，比如：asp.net，也类似）</p>\n</blockquote>\n<p><code>app.component.ts</code></p>\n<pre><code>@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'hello world';\n}\n</code></pre>\n<p><code>app.component.html</code></p>\n<pre><code>...\n&#x3C;div style=\"text-align: center\">\n  &#x3C;h1>Welcome {{ Hello World }} !&#x3C;/h1>\n&#x3C;/div>\n</code></pre>\n<blockquote>\n<p>上面的 <code>index.js</code>，把 <code>jsx</code> 的 <code>&#x3C;App /></code> 注入进了 <code>html</code> 中一个真实的 <code>DOM</code> 之后，所有的前端动态页面，就全部在 <code>&#x3C;App /></code> 内部，由 <code>react</code> 通过虚拟 <code>DOM</code> 动态地展开。好像是宇宙大爆炸的 <code>奇点</code>，<code>奇点</code> 过后，万物自行其道。\n用一个不恰当的比喻，传统的开发，就像是基于地心说的推演， 而 <code>react</code> 就像是基于日心说的推演。基础假说的不同，也就导致后续推演的结果完全不同。<code>react</code> 看待看在前端开发的角度和传统开发，角度是完全不同的，是反过来的。传统开发 <code>htm</code>, <code>js</code>, <code>css</code> 是完全割裂的；<code>React</code>则是通过 <code>jsx</code> 把 <code>html</code> 和 <code>js</code> 统一了起来（<code>css</code> 还是割裂的）。</p>\n</blockquote>\n<h2>实战</h2>\n<ul>\n<li>创建 <code>react</code> 单页应用：<code>create-react-app</code> + <code>typescript</code></li>\n<li><code>react</code> 小宇宙的 <code>奇点</code></li>\n<li>普通的 <code>js</code> 函数：<code>renderMyBlock</code>，返回字符串</li>\n<li>带参数的 <code>renderMyBlock</code>，返回输入的字符串</li>\n<li><code>jsx</code> 函数：返回 <code>html</code> 语法，<code>js</code> 和 <code>html</code> 被打通，不再割裂 !!!</li>\n<li>函数变组件，山鸡变凤凰</li>\n<li><code>props</code>\n<ul>\n<li>定义参数的 <code>interface</code></li>\n<li>参数改成 <code>props</code></li>\n<li>特殊的 <code>children</code> 属性</li>\n</ul>\n</li>\n<li>样式属性\n<ul>\n<li>直接写 <code>style</code> 属性</li>\n<li><code>class</code> vs <code>className</code></li>\n<li>事件监听：<code>onClick</code></li>\n</ul>\n</li>\n<li>普通变量 与 <code>state</code> (<code>useState</code>)</li>\n<li>生命周期 与 <code>useEffect</code>\n<ul>\n<li>初始化</li>\n<li>销毁</li>\n<li>监听变化</li>\n</ul>\n</li>\n<li><code>hooks</code></li>\n<li>虚拟 <code>DOM</code></li>\n</ul>\n<h2>进一步了解</h2>\n<ul>\n<li>前端路由：<code>react-router</code></li>\n<li><code>TypeScript</code></li>\n<li><code>styled-components</code></li>\n<li><code>ant design</code> &#x26; <code>material UI</code></li>\n<li><code>nginx</code></li>\n</ul>"}},
    "staticQueryHashes": ["3159585216","3208650349","3659731985"]}