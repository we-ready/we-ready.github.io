{
    "componentChunkName": "component---src-templates-blog-js",
    "path": "/blog/20220417_electron",
    "result": {"pageContext":{"frontmatter":{"id":"20220417_electron","title":"Electron 101","subtitle":"Electron 是什么","subject":"Electron","authors":"Chris Wei","keywords":"desktop","tags":"electron;desktop","category":"概念理解","cover":"https://media.inkscape.org/media/resources/file/Koi_carp_2.svg","videos":null,"created_when":"2022-04-17T00:00:00.000Z","updated_when":"2022-04-17T00:00:00.000Z","level":100},"excerpt":"# Electron 101\n\n# 参考链接\n\n*   [Github]()\n","html":"<h1>Electron 101</h1>\n<h2>参考链接</h2>\n<ul>\n<li><a href=\"https://github.com/electron/electron\">Github</a></li>\n</ul>\n<h2>项目初始化</h2>\n<ol>\n<li>创建目录：<code>electron</code></li>\n<li>进入项目目录</li>\n<li><code>npm</code> 初始化：<code>npm init -y</code></li>\n<li>安装 <code>electron</code> 和 <code>electron-packager</code></li>\n</ol>\n<pre><code>cnpm install electron --save-dev\ncnpm install electron-packager --save-dev\n</code></pre>\n<blockquote>\n<p>打包工具有很多，其他包括但不限于：<code>electron-builder</code>，<code>electron-forge</code></p>\n</blockquote>\n<ol>\n<li><code>package.json</code> 修改主入口文件</li>\n</ol>\n<pre><code>\"main\": \"main.js\",\n</code></pre>\n<ol>\n<li><code>package.json</code> <code>scripts</code> 部分</li>\n</ol>\n<pre><code>\"start\": \"electron .\",\n\"build\": \"electron-packager ./ Manager --win --out ./dist --arch=x64 --overwrite\",\n</code></pre>\n<h2>基础代码</h2>\n<ol>\n<li><code>build</code> 目录下的 <code>index.html</code></li>\n</ol>\n<pre><code>  &#x3C;style type=\"text/css\">\n    body {\n      font-size: 5rem;\n      color: rgb(104, 162, 228);\n      display: grid;\n      place-items: center;\n    }\n    button {\n      font-size: 5rem;\n      padding: .5rem 2rem;\n      color: rgb(0, 91, 107);\n      background: rgb(161, 192, 228);\n      border: none;\n      border-radius: 1rem;\n    }\n    button:hover {\n      outline: 6px solid rgb(104, 162, 228);\n    }\n  &#x3C;/style>\n</code></pre>\n<pre><code>  &#x3C;h2>Hello Electron&#x3C;/h2>\n  &#x3C;button>Click&#x3C;/button>\n</code></pre>\n<ol>\n<li>项目目录下的 <code>main.js</code></li>\n</ol>\n<pre><code>const { app, BrowserWindow, Menu, ipcMain } = require('electron');\n\nconst INDEX_HTML_PATH = './build/index.html';\nconst globalContext = { \n  mainWindow: null\n}\n\napp.on('ready', () => {\n  createMainWindow();\n})\n\napp.on('activate', () => {\n  if (!globalContext.mainWindow) {\n    createMainWindow();\n  }\n})\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit();\n})\n\n\nfunction createMainWindow() {\n  Menu.setApplicationMenu(null);\n\n  globalContext.mainWindow = new BrowserWindow({\n    width: 1280,\n    height: 600,\n    transparent: true,\n    fullscreen: true,\n    resizable: false,\n    movable: false,\n    frame: false,\n    webPreferences: {\n      webSecurity: false,\n      nodeIntegration: true,\n      contextIsolation: false,\n    },\n  });\n  globalContext.mainWindow.loadFile(INDEX_HTML_PATH);\n  globalContext.mainWindow.setFullScreen(true);\n  globalContext.mainWindow.webContents.openDevTools();\n}\n\n</code></pre>\n<ol>\n<li>运行</li>\n</ol>\n<pre><code>yarn start\n</code></pre>\n<h2>进程间通讯（IPC）</h2>\n<h3>render to main</h3>\n<ol>\n<li><code>index.html</code></li>\n</ol>\n<pre><code>  &#x3C;script>\n    const { ipcRenderer } = require('electron')\n    ipcRenderer.on('main-reply', (event, payload) => {\n      console.log('main-reply', payload)\n    })\n\n    function onBtnClick() {\n      ipcRenderer.send('render-msg-xxx', \"hello from render\");\n    }\n  &#x3C;/script>\n</code></pre>\n<pre><code>  &#x3C;button onclick=\"onBtnClick()\">Click&#x3C;/button>\n</code></pre>\n<ol>\n<li><code>main.js</code></li>\n</ol>\n<pre><code>ipcMain.on('render-msg-xxx', (event, payload) => {\n  console.log('ipcMain.on [render-msg-xxx]', payload)\n  event.reply('main-reply', 'done')\n})\n</code></pre>\n<h3>main to render</h3>\n<ol>\n<li><code>main.js</code></li>\n</ol>\n<pre><code>  globalContext.mainWindow.webContents.send('main-msg-xxx', \"hello from main\");\n</code></pre>\n<ol>\n<li><code>index.html</code></li>\n</ol>\n<pre><code>  ipcRenderer.on('main-msg-xxx', (event, payload) => {\n    console.log('main-msg-xxx', payload)\n  })\n</code></pre>\n<h2>打包</h2>\n<pre><code>yarn build\n</code></pre>\n<blockquote>\n<p>环境变量</p>\n</blockquote>\n<pre><code>ELECTRON_MIRROR = http://npm.taobao.org/mirrors/electron/\n</code></pre>\n<blockquote>\n<p><code>npm config</code></p>\n</blockquote>\n<pre><code>npm config set electron_mirror \"https://npm.taobao.org/mirrors/electron/\"\n</code></pre>"}},
    "staticQueryHashes": ["2877226700","3159585216","3659731985","3670619862"]}