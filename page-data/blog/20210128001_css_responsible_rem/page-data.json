{
    "componentChunkName": "component---src-templates-blog-js",
    "path": "/blog/20210128001_css_responsible_rem",
    "result": {"pageContext":{"frontmatter":{"id":"20210128001_css_responsible_rem","title":"font-size，em，rem在响应式布局中的应用","subtitle":"响应式布局，不再以所谓“像素的精准”为追求目标，而是追求页面能够自适应不同屏幕的尺寸","subject":"响应式布局","authors":"Chris Wei","keywords":"rem;em;px","tags":"css","category":"经验技巧","cover":"http://qiniuargus.weready.online/blog/coder.jpg","created_when":"2021-01-28","updated_when":"2021-01-28","level":300},"excerpt":"# font-size，em，rem在响应…\n","html":"<h1>font-size，em，rem在响应式布局中的应用</h1>\n<h2><code>px</code>，<code>em</code>，<code>rem</code> 概要</h2>\n<ul>\n<li><code>px</code> 代表像素尺寸；</li>\n<li><code>em</code> 表示当前DOM元素 <code>font size</code>，或者父级（向上追溯）DOM元素的 <code>font size</code>;</li>\n<li><code>rem</code> 表示根（<code>html</code>）元素 <code>font size</code>;</li>\n</ul>\n<h2>背景</h2>\n<p>为了实现响应式布局，页面针对不同的屏幕尺寸，需要动态调整大小。而页面上，最丰富的元素，就是<code>文字</code>。如何方便高效的设置并动态调整<code>文字</code>大小，就成了动态布局中，一个课题。</p>\n<h2>经验技巧</h2>\n<ul>\n<li>根（<code>html</code>）元素中明确设定 <code>font size</code>，缺省设置为：<code>16px</code>；浏览器尺寸变化时，尽量不动态调整；从而保持全局的统一；</li>\n<li>页面局部范围，如果有需要，明确的设定<code>font size</code>；当浏览器尺寸变化时，动态调整；</li>\n<li>所有跨页面复用的组件尺寸，采用 <code>rem</code> 为尺寸单位，并暴露 <code>size</code> 属性，并根据该属性动态调整组件大小；这样，所有组件，在不同页面，会有一个统一的效果；</li>\n<li>所有局部相关的展示，采用 <code>em</code> 为尺寸单位；这样，不同的局部，同样的样式标签，也会呈现不同的尺寸，满足不同局部的需要；</li>\n</ul>"}},
    "staticQueryHashes": ["3159585216","3208650349","3659731985"]}