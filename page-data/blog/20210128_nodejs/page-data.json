{
    "componentChunkName": "component---src-templates-blog-js",
    "path": "/blog/20210128_nodejs",
    "result": {"pageContext":{"frontmatter":{"id":"20210128_nodejs","title":"Nodejs 101","subtitle":"什么是 nodejs","subject":"nodejs","authors":"Chris Wei","keywords":"javascript;js;nodejs;node;npm","tags":"nodejs;node;npm;fullstack","category":"概念理解","cover":"https://pngset.com/images/nodejs-node-js-logo-recycling-symbol-text-metropolis-city-transparent-png-703185.png","videos":"https://qiniuargus.weready.online/blog/sharing/video/20220303-nodejs-101.mp4","created_when":"2021-01-28","updated_when":"2022-03-03","level":100},"excerpt":"# Nodejs 101\n\n# nodejs 是什么\n\n# 官网的说明\n","html":"<h1>Nodejs 101</h1>\n<h2>nodejs 是什么</h2>\n<h4>官网的说明</h4>\n<blockquote>\n<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时。</p>\n</blockquote>\n<blockquote>\n<p>Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine.</p>\n</blockquote>\n<h4>广义的理解</h4>\n<ul>\n<li>一个 <code>JavaScript</code> (<code>JS</code>) 运行时（ <code>Chrome V8</code> 引擎是 <code>JS</code> 在浏览器里的运行时，<code>NodeJS</code> 是 <code>JS</code> 在服务器上的运行时 ）</li>\n<li>一套内置的开发包管理工具: <code>npm</code>（其他第三方包管理工具：yarn，pnpm）</li>\n<li>一套内置的开发包</li>\n<li>一种全新的代码执行模式：异步非阻塞（在此之前的传统运行模式是：阻塞式）</li>\n<li>一套代码组织规范\n<ul>\n<li><code>module</code>: <code>exports</code>, <code>require</code> (<code>export</code>, <code>import</code>)</li>\n<li><code>package</code>: <code>package.json</code> (<code>dependecy</code>)</li>\n</ul>\n</li>\n<li><code>nodejs</code> 第三方包模块共享生态：<code>npmjs.com</code></li>\n<li>全栈开发的捷径</li>\n</ul>\n<h4>历史</h4>\n<ul>\n<li>1995：<code>JS</code> 首次推出，作为浏览器页面提供特殊效果的支撑</li>\n<li>2009：<code>NodeJS</code> 出现，<code>JS</code> 运行时的引擎，从浏览器被移植到操作系统（服务器）\n<blockquote>\n<p>在此之前，服务器端的开发语言主要包括：<code>PHP</code>, <code>ASP.NET</code>, <code>Ruby</code>, <code>Perl</code>, <code>Python</code>, <code>Java</code></p>\n</blockquote>\n</li>\n</ul>\n<h4>特性</h4>\n<ul>\n<li>异步非阻塞事件驱动模型造就高性能</li>\n</ul>\n<h2>下载安装</h2>\n<ul>\n<li>\n<p><a href=\"https://nodejs.org\">官网</a></p>\n</li>\n<li>\n<p>检查版本</p>\n<pre><code>node -v\nnpm -v \n</code></pre>\n</li>\n<li>\n<p>Linux 服务端安装</p>\n</li>\n<li>\n<p>卸载</p>\n</li>\n</ul>\n<h2>动手实践</h2>\n<h4><code>hello world</code></h4>\n<ul>\n<li>\n<p>在浏览器的运行时上执行</p>\n<pre><code>console.log(\"hello world\")\n</code></pre>\n</li>\n<li>\n<p>在 <code>PC</code> 命令行终端执行同样命令</p>\n</li>\n</ul>\n<h4><code>node</code> 命令行交互模式</h4>\n<ul>\n<li>\n<p>进入交互模式</p>\n<pre><code>node\n</code></pre>\n</li>\n<li>\n<p>执行上述命令</p>\n<blockquote>\n<p><code>JS</code> 是一种脚本语言，无需事先编译成机器码，但是需要运行时（运行环境）；可以交换执行，也可以批量执行（开发模式）；</p>\n</blockquote>\n</li>\n</ul>\n<h4>浏览器内置运行时与 <code>nodejs</code> 运行时的区别</h4>\n<ul>\n<li>\n<p>变量赋值</p>\n<pre><code>> var a=1;\nundefined\n> a\n1\n</code></pre>\n</li>\n<li>\n<p>浏览器运行时</p>\n<pre><code>window.a\n</code></pre>\n</li>\n<li>\n<p><code>nodejs</code> 运行时</p>\n<pre><code>global.a\n</code></pre>\n</li>\n</ul>\n<h4>开发模式</h4>\n<ul>\n<li>\n<p>新建文件 'index.js'</p>\n<pre><code>/*\n  index.js\n*/\nconsole.log(\"hello\");\nconsole.log(process.platform);\nconsole.log(process.env.USER);\n</code></pre>\n</li>\n<li>\n<p>命令行执行：<code>node index.js</code> 或 <code>node .</code></p>\n</li>\n</ul>\n<h4>自创并使用 <code>module</code> 模块</h4>\n<ul>\n<li>\n<p>新建文件 'modulex.js'</p>\n<pre><code>/**\n  modulex.js\n*/\nvar a = 1;\nmodule.exports.a = a;\nmodule.exports.b = 2;\n</code></pre>\n</li>\n<li>\n<p>使用模块 <code>require</code></p>\n<pre><code>/**\n  index.js\n*/\nvar m = require('./modulex');\nconsole.log(m);\n</code></pre>\n<pre><code>> node .\n</code></pre>\n</li>\n<li>\n<p>等效代码</p>\n<pre><code>/**\n  modulex.js\n*/\nvar a = 1;\nexports.a = a;\nexports.b = 2;\n</code></pre>\n</li>\n<li>\n<p>暴露函数</p>\n<pre><code>/**\n  modulex.js\n*/\nmodule.exports = function(x) {\n  console.log(`The input is ${x}!`)\n};\n</code></pre>\n<pre><code>/**\n  index.js\n*/\nvar fn = require('./modulex');\nconsole.log(fn);\nfn(99);\n</code></pre>\n</li>\n</ul>\n<h4>使用 <code>nodejs</code> 内置包模块（<code>fs</code>）</h4>\n<blockquote>\n<p>尝试理解同步阻塞、异步非阻塞</p>\n</blockquote>\n<ul>\n<li>\n<p>同步阻塞</p>\n<pre><code>/*\n  index.js\n*/\nconst { readFileSync } = require('fs')\n\nconsole.log('reading...')\nconst txt = readFileSync('./modulex.js', 'utf8')\nconsole.log(txt)\nconsole.log('Done!')\n</code></pre>\n</li>\n<li>\n<p>异步非阻塞</p>\n<pre><code>/*\n  index.js\n*/\nconst { readFile } = require('fs')\n\nconsole.log('reading...')\nreadFile('./modulex.js', 'utf8', (err, txt) => {\n  console.log(txt)\n})\nconsole.log('Done?')\n</code></pre>\n</li>\n<li>\n<p><code>Promise</code></p>\n<pre><code>/*\n  index.js\n*/\nconst { readFile } = require('fs').promises\n\nasync function rdFile() {\n  console.log('reading...')\n\n  const txt = await readFile('./modulex.js', 'utf8')\n  console.log('Done!')\n}\nrdFile()\n</code></pre>\n<pre><code>/*\n index.js\n*/\nconst { readFile } = require('fs').promises\n\nasync function rdFile() {\n console.log('reading...')\n\n const p = await readFile('./modulex.js', 'utf8')\n p.then((rslt) => {\n   if (rslt instanceof Error) console.error(rslt)\n   else console.log(rslt)\n })\n console.log('Done!')\n}\nrdFile()\n</code></pre>\n</li>\n</ul>\n<h4>使用 <code>npm</code> 平台和第三方包模块</h4>\n<ul>\n<li>\n<p><a href=\"https://www.npmjs.com\">npm官网</a></p>\n</li>\n<li>\n<p>搜索 <code>express</code></p>\n</li>\n<li>\n<p><code>npm init</code> &#x26; <code>package.json</code></p>\n<pre><code>  ... ...\n  \"scripts\": {\n    \"start\": \"node .\"\n  },\n  ... ...\n  \"devDependencies\": {\n\n  },\n  \"dependencies\": {\n  }\n</code></pre>\n</li>\n</ul>\n<blockquote>\n<p><code>json</code> 文件和 <code>json</code> 数据格式（）</p>\n</blockquote>\n<ul>\n<li>\n<p>安装</p>\n<pre><code>npm install express\n</code></pre>\n</li>\n<li>\n<p>使用</p>\n<pre><code>const express = require('express')\nconst app = express()\n\napp.get('/', function (req, res) {\n  res.send('Hello World')\n})\n\napp.listen(3000)\n</code></pre>\n</li>\n</ul>\n<h4>包封装及引用标准</h4>\n<ul>\n<li><code>COMMON JS</code> &#x26; <code>require()</code></li>\n<li><code>ES MODULES</code> &#x26; <code>import/export</code></li>\n</ul>\n<h4>常规步骤</h4>\n<ul>\n<li>执行 <code>npm init</code></li>\n<li>执行 <code>npm install</code></li>\n<li>执行 <code>npm run</code></li>\n</ul>\n<h2>进一步了解</h2>\n<ul>\n<li><code>Promise</code></li>\n<li><code>TypeScript</code></li>\n<li><code>React</code></li>\n<li><code>Linux</code> 服务器安装 <code>Nodejs</code> (docker compose setup)</li>\n</ul>\n<h2>参考</h2>\n<ul>\n<li>\n<p><a href=\"http://nodejs.cn/\">Nodejs 中文网</a></p>\n</li>\n<li>\n<p><a href=\"https://nodejs.org/en/\">Nodejs 官网</a></p>\n</li>\n<li>\n<p><a href=\"watch?v=pU9Q6oiQNd0&#x26;t=18s\">LearnCode.academy</a></p>\n</li>\n<li>\n<p><a href=\"http://www.atlas.weready.online/blog/20210128101_1_nodejs\">本文地址</a></p>\n</li>\n</ul>"}},
    "staticQueryHashes": ["3159585216","3208650349","3659731985"]}