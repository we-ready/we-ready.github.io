{"componentChunkName":"component---src-templates-blog-js","path":"/blog/20210203101_nestjs","result":{"pageContext":{"frontmatter":{"id":"20210203101_nestjs","title":"nestjs 101","subtitle":"如何利用 nodejs 的优势完成全栈开发，强烈推荐基于 nodejs 的后端开发框架：nestjs","subject":"fullstack","author":"Chis Wei","keywords":"后端开发;面向切面的开发","tags":"fullstack;nodejs;nestjs","category":"概念理解","cover":"https://d33wubrfki0l68.cloudfront.net/e937e774cbbe23635999615ad5d7732decad182a/26072/logo-small.ede75a6b.svg","created_when":"2021-02-03","updated_when":"2021-02-03","level":100},"excerpt":" nestjs 101\n\n 参考资料\n\n-   [让我们用Nestjs来重写一个CNode](<>)\n","html":"<h1>nestjs 101</h1>\n<h2>参考资料</h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/f0a4944e8fb9\">让我们用Nestjs来重写一个CNode</a></li>\n</ul>\n<h2>概念</h2>\n<h4>核心组件</h4>\n<blockquote>\n<p>NestJs 主要有 8 个组件（Controller 控制器、Component 组件、Module 模块、Middlewares 中间件、Exception Filters 异常过滤器、Pipes 管道、Guards 守卫、Interceptors 拦截器）\nComponent 是 NestJs Ver 4.5 的称呼，5.0 之后成为 Provider</p>\n</blockquote>\n<h4>不同角色在请求过程中的执行顺序</h4>\n<blockquote>\n<p>客户端请求 ---> 中间件 ---> 守卫 ---> 拦截器之前 ---> 管道 ---> 控制器处理并响应 ---> 拦截器之后 ---> 过滤器</p>\n</blockquote>\n<h4>不同角色的特点</h4>\n<ul>\n<li>\n<p>功能</p>\n<ul>\n<li>中间件    ：访问 请求（req） 和 响应（res） 对象，并调用下一个 中间件（next）</li>\n<li>过滤器    ：处理所有抛出的异常</li>\n<li>管道      ：对请求参数做变形（纯函数）</li>\n<li>守卫      ：做权限认证</li>\n<li>拦截器    ：特殊功能，类似于AOP面向切面编程，</li>\n</ul>\n</li>\n<li>\n<p>实现方式</p>\n<ul>\n<li>中间件    ：由 @Injectable() 装饰的类 | 函数</li>\n<li>过滤器    ：</li>\n<li>管道      ：用@Injectable()装饰器注释的类</li>\n<li>守卫      ：用@Injectable()装饰器注释的类</li>\n<li>拦截器    ：用@Injectable()装饰器注释的类</li>\n</ul>\n</li>\n<li>\n<p>实现为类时，所需实现的接口</p>\n<ul>\n<li>中间件    ：NestMiddleware</li>\n<li>过滤器    ：ExceptionFilter </li>\n<li>管道      ：PipeTransform</li>\n<li>守卫      ：CanActivate</li>\n<li>拦截器    ：NestInterceptor </li>\n</ul>\n</li>\n<li>\n<p>使用方式</p>\n<ul>\n<li>中间件    ：全局注册（app.use）               | 模块注册（config(consumer) { consumer.apply().with().exclude().forRoutes()）</li>\n<li>过滤器    ：全局注册（app.useGlobalFilters）  | 装饰器（@UseFilters）装饰控制器   | 装饰器（@UseFilters）装饰路由</li>\n<li>管道      ：全局注册（app.useGlobalPipes）    | 作用于当前控制器（@UsePipes)      | 作用于当前路由（@UsePipes)        | 作用于当前的 Body（@Body）</li>\n<li>守卫      ：全局注册（app.useGlobalGuards）   | 作用于当前控制器（@UseGuards) </li>\n<li>拦截器    ：全局注册（app.useGlobalInterceptors）   | 作用于当前控制器（@UseInterceptors)  | 作用于当前路由（@UseInterceptors) </li>\n</ul>\n</li>\n</ul>\n<h4>不同角色所需实现的接口</h4>"}},"staticQueryHashes":["2561680736","2718502863","3159585216"]}