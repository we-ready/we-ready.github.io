{
    "componentChunkName": "component---src-templates-blog-js",
    "path": "/blog/20210224001_nginx_config",
    "result": {"pageContext":{"frontmatter":{"id":"20210224001_nginx_config","title":"nginx 的常规配置","subtitle":"nginx 作为网站反向代理的常规配置","subject":"运维","author":"Chris Wei","keywords":"location;root;alias","tags":"nginx","category":"指导手册","cover":"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=1195987839,3261843386&fm=26&gp=0.jpg","created_when":"2021-02-24","updated_when":"2021-02-24","level":200},"excerpt":"# nginx 的常规配置\n\n# `conf.d`\n\n在 `nginx` 缺省目录下的 `conf.d` 目录，可以增加若干个 \n","html":"<h1>nginx 的常规配置</h1>\n<h2><code>conf.d</code></h2>\n<p>在 <code>nginx</code> 缺省目录下的 <code>conf.d</code> 目录，可以增加若干个 <code>conf</code> 文件，从而可以在同一个 web 服务器下，共存多个网站。</p>\n<h2>将标准的 <code>80</code> 端口 <code>http</code> 页面请求映射到服务器目录</h2>\n<h4><code>nginx</code> 缺省配置</h4>\n<pre><code>server {\n    listen       80;\n    server_name  localhost;\n\n    #charset koi8-r;\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n</code></pre>\n<h4>映射到 <code>www</code> 目录</h4>\n<pre><code>    location / {\n        root   /www;\n        index  index.html index.htm;\n    }\n</code></pre>\n<h2>将外部的 <code>web</code> 请求，转发到后台服务</h2>\n<h4>独立域名</h4>\n<pre><code>server {\n    listen       80;\n    server_name  api.xxxxx.com;\n\n    location / {\n       proxy_pass http://service:3000;\n       proxy_http_version 1.1;\n       proxy_set_header Upgrade $http_upgrade;\n       proxy_set_header Connection 'upgrade';\n       proxy_set_header Host $host;\n       proxy_cache_bypass $http_upgrade;\n    }\n</code></pre>\n<h4>共同域名下的局部 <code>url</code></h4>\n<pre><code>server {\n    listen       80;\n    server_name  www.xxxxx.com;\n\n    location /api/ {\n       proxy_pass http://service:3000;\n       proxy_http_version 1.1;\n       proxy_set_header Upgrade $http_upgrade;\n       proxy_set_header Connection 'upgrade';\n       proxy_set_header Host $host;\n       proxy_cache_bypass $http_upgrade;\n    }\n\n    location /notification/ {\n       proxy_pass http://service:3000;\n       proxy_http_version 1.1;\n       proxy_set_header Upgrade $http_upgrade;\n       proxy_set_header Connection 'upgrade';\n       proxy_set_header Host $host;\n       proxy_cache_bypass $http_upgrade;\n    }\n\n</code></pre>\n<h2>单页应用的 <code>browser router</code></h2>\n<h4>某个 <code>url</code> pattern 之下的所有 <code>url</code> 映射到同一个 <code>html</code> 单页</h4>\n<pre><code>    location ^~ /app/admin/ {\n        alias  /app/admin/;\n        index  index.html index.htm;\n        try_files $uri $uri/ /app/admin/index.html;\n    }\n</code></pre>\n<h2>监听不同端口</h2>\n<pre><code>    listen       30080;\n    listen       80;\n    server_name  www.xxxxx.com;\n</code></pre>\n<h2>启用 <code>https</code></h2>\n<pre><code>    listen       80;\n    listen       443 ssl;\n    server_name  www.xxxxx.com;\n    ssl_certificate /etc/nginx/???/www.xxxxx.com.pem;\n    ssl_certificate_key /etc/nginx/???/www.xxxxx.com.key;\n</code></pre>\n<blockquote>\n<p>需要申请、下载，并在在某个目录（<code>???</code>）安装证书文件（<code>pem</code>，<code>key</code>）</p>\n</blockquote>\n<h2>启用 <code>gzip</code> 压缩</h2>\n<pre><code>    gzip on;\n    gzip_buffers 32 4K;\n    gzip_comp_level 6;\n    gzip_min_length 100;\n    gzip_types application/javascript text/css text/xml;\n    gzip_disable \"MSIE [1-6]\\.\"; #配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）\n    gzip_vary on;\n</code></pre>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://www.nginx.cn/4658.html\">nginx的location、root、alias指令用法和区别</a></li>\n</ul>\n<p>以下内容来自上述文章</p>\n<p>----------- 分割线 -----------</p>\n<p>nginx指定文件路径有两种方式root和alias，指令的使用方法和作用域：\n[root]\n语法：root path\n默认值：root html\n配置段：http、server、location、if</p>\n<p>[alias]\n语法：alias path\n配置段：location</p>\n<p>root与alias主要区别在于nginx如何解释location后面的uri，这会使两者分别以不同的方式将请求映射到服务器文件上。\nroot的处理结果是：root路径＋location路径\nalias的处理结果是：使用alias路径替换location路径\nalias是一个目录别名的定义，root则是最上层目录的定义。\n还有一个重要的区别是alias后面必须要用“/”结束，否则会找不到文件的。。。而root则可有可无~~</p>\n<p>root实例：</p>\n<pre><code>location ^~ /t/ {\n     root /www/root/html/;\n}\n</code></pre>\n<p>如果一个请求的URI是/t/a.html时，web服务器将会返回服务器上的/www/root/html/t/a.html的文件。</p>\n<p>alias实例：</p>\n<pre><code>location ^~ /t/ {\n alias /www/root/html/new_t/;\n}\n</code></pre>\n<p>如果一个请求的URI是/t/a.html时，web服务器将会返回服务器上的/www/root/html/new_t/a.html的文件。注意这里是new_t，因为alias会把location后面配置的路径丢弃掉，把当前匹配到的目录指向到指定的目录。</p>\n<p>注意：</p>\n<ol>\n<li>使用alias时，目录名后面一定要加\"/\"。</li>\n<li>alias在使用正则匹配时，必须捕捉要匹配的内容并在指定的内容处使用。</li>\n<li>alias只能位于location块中。（root可以不放在location中）</li>\n</ol>\n<p>----------- 结束 -----------</p>"}},
    "staticQueryHashes": ["1280648994","3159585216"]}