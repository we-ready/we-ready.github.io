{"data":{"allMarkdownRemark":{"nodes":[{"fields":{"filename":"20200125_致敬浦东人民医院勇敢美丽的逆行者"},"frontmatter":{"id":null,"title":"【医院动态】致敬！浦东人民医院勇敢美丽的逆行者！","subtitle":null,"subject":null,"author":null,"keywords":null,"tags":null,"category":"医院动态","cover":"https://inews.gtimg.com/newsapp_bt/0/11255933709/1000","created_when":null,"updated_when":null,"date":"2020-01-25"},"excerpt":"向两位勇敢美丽的逆行者致以最崇高的敬礼！\n浦东人民医院\n呼吸科\n尹育红护士长\n重症监护室\n范叶君护士长\n在202…","html":"<p>向两位勇敢美丽的逆行者致以最崇高的敬礼！\n浦东人民医院\n呼吸科\n尹育红护士长\n重症监护室\n范叶君护士长\n在2020这个特殊的春节，她们暂别家人，加入浦东新区驰援湖北救援医疗队，前往疫情最严重的地区“参战”，你们是伟大的英雄，请多保重并平安归来！致敬！</p>"},{"fields":{"filename":"20200416_浦东新区人民医首张云检验单"},"frontmatter":{"id":null,"title":"【医院动态】浦东新区人民医院开出首张“云检验检查”单","subtitle":null,"subject":null,"author":null,"keywords":null,"tags":null,"category":"医院动态","cover":"https://pics5.baidu.com/feed/3812b31bb051f819bc1899e8479fcfeb2e73e701.jpeg?token=743567ee020fc8847cda8c367650951c","created_when":null,"updated_when":null,"date":"2020-04-16"},"excerpt":"家住川沙的7…","html":"<p>家住川沙的75岁许老伯是心血管内科的老病号，最近，又时不时出现出现心慌、胸闷、气短等症状，特别是在活动和劳累之后，症状更为明显。然而，新冠疫情却让许老伯在去不去医院就诊的问题上产生了犹豫。许老伯平时关注浦东新区人民医院公众号，曾看到“浦人民云医院”的信息推送，虽然年纪大了，许老伯心思却很活络，于是他“求助”女儿并顺利体验了一把“时髦”的云问诊。\n图说：云就医\n在女儿的帮助下，昨天许老伯在“浦人民云医院”注册并绑定了个人信息，提前预约了心血管内科主任韩素霞的号源，提交了自己的病情描述，支付了挂号费。在预约时段，许老伯准时与韩素霞开始了线上“云问诊”。在仔细询问了许老伯的身体情况和用药情况之后，韩主任建议许老伯做进一步的心脏方面检查并为其开具了线上检验检查单。许老伯成功完成线上的检查费用支付，下一次可直接到院做相关检查。\n这一次的“云就医”体验让许老伯直呼方便，许老伯开心地说：“原先到医院看病，要跑老远的路，一大早去医院排队挂号，现在只要一部手机，就能在家和专家‘面对面’，不仅节约了时间精力，更是在这个特殊的时期让我们老百姓减少了感染风险，真好！”他说，“做完检查后，我还要在手机上找韩主任看病。”\n“浦人民云医院”自4月4日上线运营以来，医生已成功开具“互联网”处方10余张，而昨天，浦东新区人民医院又在线上开出了首张“互联网”检验检查单，使患者在就医过程中“少跑一次”，甚至“只跑一次”。而需要长期开药的慢病复诊患者，还能“一次都不用跑”，足不出户即享受到医生诊疗和药品配送上门的服务。\n在疫情防控期间，“互联网”医院的上线有效助力实现患者与医生的“零距离”交流，使就医流程加足马力“加速度”。据悉，浦东新区人民医院线上医保结算系统正努力进行数据的对接，很快将开通使用，实现线上脱卡移动支付。\n通讯员 施蕾婷 新民晚报记者 左妍</p>"},{"fields":{"filename":"20200126_上海市浦东新区人民医院面向全国招收2021年住院医师规范化培训学员"},"frontmatter":{"id":null,"title":"【通知公告】上海市浦东新区人民医院面向全国招收2021年住院医师规范化培训学员","subtitle":null,"subject":null,"author":null,"keywords":null,"tags":null,"category":"通知公告","cover":"https://imagepphcloud.thepaper.cn/pph/image/100/951/403.jpg","created_when":null,"updated_when":null,"date":"2020-11-26"},"excerpt":"根据上海市卫生健康委员会住院医师规范化培训相关文件，我院202…","html":"<p>根据上海市卫生健康委员会住院医师规范化培训相关文件，我院2021年拟面向全国招收住院医师规范化培训学员，目前开始接收考生报名。\n报名条件\n1、具有普通高等医学院（校）全日制医学专业本科及以上学历，拟从事临床医疗工作的2021年应届毕业生及2020年毕业生。申报全科医学科、急诊科、康复医学科、麻醉科专业基地者，毕业时间可适当放宽；\n2、通过大学英语四级考试；\n3、具有正常履行培训岗位职责的身体条件；\n4、在校期间(本科及以上)未受过纪律处分；\n5、在校期间(本科及以上)通过所有课程考核；\n6、自愿参加住院医师规范化培训，身心健康，遵纪守法。</p>\n<p>招录程序\n1、材料审核\n2、笔试、面试\n笔试：申报专业为考试范围\n面试：考察专业能力、英文水平及综合素质等\n公布录用人员名单，并签订就业协议书\n3、确定录用\n福利待遇\n1、与医院签订培训暨劳动合同，合同期限为3年（按照文件规定执行），劳动关系委托上海市卫生人才交流服务中心管理；培训结束后，合同自然终止，培训对象自主择业。\n2、依法参加并享有养老、医疗、失业、生育、工伤、公积金等社会保障，并计算为工龄。\n3、享受国家法律法规规定的以及合同约定的相关福利待遇，并享受与医院同类人员同等福利待遇；工资奖金按照学历和资历情况，参照医院同类人员水平发放。\n4、医院免费提供住宿，每月发放饭贴补助。\n5、特别优秀者，医院在人才培养、课题申请等方面予以优先资助。\n6、非上海生源毕业生，可以按上海市有关规定办理上海市居住证；培训合格后到浦东郊区基层医疗机构工作的，可按规定优先申请办理上海市居住证转上海市户籍手续，并享受相关的住房补贴和基层工作补贴。\n7、培训合格后，全科基地可帮助推荐工作；其它专业基地可择优录取至本院工作。</p>\n<p>报名时间及步骤\n1、报名开始时间：自本通知发布之日起至上海市2021年度规培招录截止日期；\n2、报名方法\n通过电子邮件：pryzygp@163.com投递个人简历至我院人力资源部，请在邮件上注明“（内科/全科医学科/急诊科/儿科/康复医学科/妇产科/超声医学科/麻醉科/外科）学科基地+姓名”字样，并附相关附件：应届毕业生递交身份证、毕业生推荐表、学习阶段成绩复印件（成绩合格，需达到毕业相应学分)。\n3、2021年2月起登陆上海市毕业后医学教育管理平台\n(<a href=\"http://shgme.mvwchina.com\">http://shgme.mvwchina.com</a>)，点击新学员注册，填写注册信息，并留存用户名及密码。进入系统后点击报名与录取，点击填写报名表。进入报名表页面后，至少填完带*号的必填项。信息检查无误后，点页面下面的提交按钮，即报名成功。等待人力资源部通知参加考试（笔试、面试）。\n注意事项：在填写“申请报名——志愿信息”时，您在“第一志愿”医院中请选择“上海市浦东新区人民医院”，培训学科选择确定为内科/全科医学科/急诊科/儿科/康复医学科/妇产科/超声医学科/麻醉科/外科。\n上海市浦东新区人民医院简介\n向上滑动阅览\n上海市浦东新区人民医院（上海市浦东新区红十字医院）创建于1938年，是一所具有80余年建院历史的集医疗、教学、科研、康复、预防、保健于一体的综合性医院，是上海市第三轮加强公共卫生体系建设 “三年行动计划”建设项目——上海市创伤急救中心（东部）建设单位和全国综合医院中医药工作示范单位。2019年顺利通过中国胸痛中心认证（标准版）和电子病历系统应用水平分级评价（五级）评审。2020年3月，被上海市卫生健康委员会认定为上海市第一批区域性医疗中心建设单位。医院获批互联网医院牌照，成为浦东新区第一家互联网医院，浦东新区人民医院互联网医院——“浦人民云医院”正式上线运营，是上海市首家完成医疗付费“一件事”工程、互联网医院线上医保支付和互联网医院电子票据试点三项改革工作的区属单位。2020年7月，根据上海市卫生健康委沪卫医〔2020〕57号文件，医院经审定通过三级乙等综合医院评审。\n医院位于上海对外辐射门户型综合功能区、中国历史文化名镇——川沙新镇，毗邻上海浦东国际机场、上海国际旅游度假区（迪士尼乐园）、张江科学城和规划建设中的铁路枢纽上海东站。上海城市总体规划（2017-2035）赋予了“川沙主城片区”的新定位，张江科学城是落实上海自贸区与科创中心建设两大国家战略的重要区域。医院承担着周边地区140平方公里区域面积近100万人口的医疗救治和技术支持任务。占地面积67.7亩，目前建筑面积9.8万平方米，核定床位1000张，实际开放床位964张。设有33个临床医技科室和27个行政职能科室，现有职工1480人，其中卫技人员1313人，在岗执业医师448人。具有高级职称人员178人，硕博士学位279人。医院配有1.5T 及3.0T核磁共振诊断仪，64排、128排及320排X射线计算机断层摄像设备，DSA等先进医疗仪器设备。2019年医院诊疗总人次200.49万人次，门急诊量180.52万人次，住院量4.03万人次，手术量2.15万例。\n医院学科齐全，拥有市、区重点学科群、学科及专科24个。中医科为上海市重点学科，肛肠外科、药剂科、急诊科是上海市重点专科，急诊科为浦东新区临床高原学科，神经内科为浦东新区临床特色学科，功能性胃肠病学科群、脑血管病学科群为浦东新区重点学科群，内分泌科、神经内科、呼吸内科、肛肠外科、放射影像科、超声影像科为浦东新区重点学科，神经外科、妇产科宫颈疾病、康复医学科、微创脊柱外科、急诊医学科、皮肤性病科为浦东新区重点专科，超声影像科、护理学、病理科、儿科为浦东新区重要薄弱学科。2019年医院获批成为上海市院士专家工作站建站单位，并建立上海市重点实验室——病原真菌医学检验重点实验室，首位进站院士为中国工程院院士廖万清。\n医院积极加强附属医院内涵建设，目前承担着上海中医药大学、安徽医科大学、南通大学医学院、上海健康医学院、新疆医科大学、黑龙江中医药大学等医学院校研究生培养任务及本科生、专科生临床实习与带教任务。医院是国家药物临床试验机构（GCP）、上海市住院医师规范化培训基地（全科、急诊科、康复科、内科、妇产科、儿科、外科、麻醉科、超声医学科）和上海市助理全科医生规范化培训医院。\n近五年，承担浦东新区科委、浦东新区卫生健康委以上课题及人才培养项目共133项，包括国家自然科学基金、吴阶平医学基金会、上海市自然科学基金、上海市科委、上海市卫生健康委等。\n围绕浦东新区“十三五”规划建设“川沙城市副中心”、“旅游城”和“航空城”的建设规划，2019年8月医院门急诊医技综合楼改扩建工程项目获浦东新区发改委批复立项，新建总建筑面积59929平方米，项目总投资8.5亿元。在“十四五”期间建成后，医院总建筑面积将达到13.6万平方米。作为浦东东部区域性医疗中心、浦东国际机场疫情防控和医疗救治定点医院，由于特殊的区位特点，医院将继续发挥区域性创伤急救和公共卫生中心的重要作用，担当守护上海“东大门”的重任，切实做好浦东新区乃至上海市重大社会突发事件及公共卫生事件（如SARS、禽流感、新冠肺炎等）应急救治工作，积极打造一所高水准、高效率、人性化的具有三级医院质量服务内涵和一流大学附属医院水平的现代化综合性医院！\n联系方式\n通讯地址：上海市浦东新区川环南路490号\n邮政编码：201299\n电子邮件：pryzygp@163.com\n咨询电话：021-58921989 021-20509430\n联系人：薛老师、彭老师      </p>"},{"fields":{"filename":"20200710_一部手机就能完成就诊全流程"},"frontmatter":{"id":null,"title":"【医院动态】一部手机就能完成就诊全流程 上海市浦东新区人民医院率先实现“扫一扫 全程看病”","subtitle":null,"subject":null,"author":null,"keywords":null,"tags":null,"category":"医院动态","cover":"http://www.sh.chinanews.com//2020/0710/U810P939DT20200710181636.jpg","created_when":null,"updated_when":null,"date":"2020-07-10"},"excerpt":"中新网上海新闻7月1…","html":"<p>中新网上海新闻7月10日电(记者 陈静)医保电子凭证脱卡支付，开通无感信用支付功能、医疗收费票据“无纸化”……在区域性医疗中心——上海市浦东新区人民医院率先实现“全程看病只需扫一扫”！\n据悉，2020年3月，浦东新区人民医院被上海市卫生健康委员会认定为上海市第一批区域性医疗中心建设单位。\n浦东新区人民医院是川沙医疗联合体牵头组建单位，成员单位包括3家专科医院和10家社区卫生服务中心，2018年初正式启动了新一轮川沙医疗联合体工作，现已形成健康服务的广泛辐射和长效机制，并已基本建立“基层首诊、双向转诊、急慢分治、上下联动”的分级诊疗模式。\n据悉，在传统就医过程中，实体医保卡在医保患者就诊时是必不可缺的，但如今在浦东新区人民医院，患者通过手机就能申领“医保电子凭证”，只要一部手机，无需携带实体医保卡，看病全程只需二维码扫一扫，就能完成所有就诊流程。浦东新区人民医院的互联网医院同样可以完成医保脱卡支付，让更多患者感受到从预约挂号、费用结算到送药上门的一系列便捷服务。目前，患者可以通过随申办、微信、支付宝、互联网医院等多种渠道，实名认证申领、激活生成个人“医保电子凭证”。\n在医疗付费“一件事”工程中，浦东新区人民医院依托中国银联、商业银行、第三方支付平台等支付通道及其线上信用产品，向上海医保参保人员提供“基于信用的无感支付服务”，让就医群众到达医生诊室时，只需出示其“医保电子凭证”(随申码)，目前可通过随申办APP和随申办微信小程序两个渠道。\n记者看到，患者在医生诊间完成诊疗服务后，信息系统自动发起基于信用的无感支付服务，发生医疗费用的医保部分实时结算、自费部分由签约绑定的信用账户进行自动支付，在整个过程中，患者可以无需做任何付费动作，真正实现就医过程的无感支付。同时，为满足部分人群传统窗口付费的习惯，医院仍保留部分收费窗口。</p>"},{"fields":{"filename":"20200711_上海浦东新区人民医院实现区属医院医保脱卡支付"},"frontmatter":{"id":null,"title":"【医院动态】上海浦东新区人民医院实现区属医院医保脱卡支付","subtitle":null,"subject":null,"author":null,"keywords":null,"tags":null,"category":"医院动态","cover":"https://pics7.baidu.com/feed/0bd162d9f2d3572cea935893c2cf902163d0c374.jpeg?token=42bd3e9ef65e9c29083e1475131d2ba8","created_when":null,"updated_when":null,"date":"2020-07-11"},"excerpt":"7月10月，界面新闻从上海市浦东新区人民医院了解到，7月…","html":"<p>7月10月，界面新闻从上海市浦东新区人民医院了解到，7月3日，浦东新区人民医院开出一张核酸检测电子票据，这也是上海首家区级医院在互联网医院业务开具的医疗收费电子票据。\n据了解，上述电子票据与线上医保脱卡支付相互衔接，患者可分时段预约核酸检测项目，自助下单完成线上缴费，手机端即刻领取电子票据，根据约定时间到院检测，当天就能用手机查看电子报告。\n截至7月10日，该院互联网医院共开具1689张医疗收费电子票据，主要内容为核酸检测、复诊、挂号等。该院院长孙万驹表示，目前电子票据的服务需求为200-300份/日。\n孙万驹表示，互联网医疗收费电子票据与线上医保脱卡支付相互衔接，实现了患者互挂号、缴费、电子票据交付的线上全流程数字化闭环管理，实现了“源头可溯、全程可控、风险可防、责任可究及公众可查”的医疗收费电子票据管理新模式。\n浦东新区人民医院服务范围140平方公里，覆盖近100万人口，智慧医疗有很大的发展空间。\n2020年3月24日，浦东新区人民医院获得互联网医院牌照，4月3日正式上线运营。截至6月底，已提供线上服务20330人次。\n目前，该院已实现医疗付费“一件事”、互联网医院线上医保支付和互联网医疗收费电子票据试点三项改革工作，是上海市首家完成上述三项改革工作的区级医院。\n以前就诊时，患者就医需携带实体医保卡。医疗付费“一件事”实行后，患者不用携带实体卡，通过手机申领“医保电子凭证”，看病全程“扫一扫”，就能完成所有就诊流程。同时，在浦东新区人民医院的互联网医院，同样可以完成医保脱卡支付。</p>"},{"fields":{"filename":"20200711_智慧医疗推进区域医疗中心建设"},"frontmatter":{"id":null,"title":"【医院动态】智慧医疗推进区域医疗中心建设”采访活动现场探访浦东新区人民医院","subtitle":null,"subject":null,"author":null,"keywords":null,"tags":null,"category":"医院动态","cover":"https://imagepphcloud.thepaper.cn/pph/image/77/374/395.jpg","created_when":null,"updated_when":null,"date":"2020-07-11"},"excerpt":"7月1…","html":"<p>7月10日上午，由上海市卫生健康委新闻宣传处主办的“智慧医疗推进区域医疗中心建设”采访活动在我院举行。\n上海市卫生健康委新闻宣传处处长艾晓金、副处长潘明华，我院院长孙万驹、副院长石泉及相关职能科室负责人出席活动。\n来自中央电视台、人民日报、新华社、中新社、上海电视台、上海人民广播电台、解放日报、文汇报、新民晚报、新闻晨报、劳动报、澎湃网、东方网、青年报、上海日报、上海教育电视台、医学界、大众卫生报、界面新闻、健康财富的20余位记者组成的记者团围绕“智慧医疗推进区域医疗中心建设”主题进行了现场采访报道。\n我院孙万驹院长就“互联网医院模式下区域性医疗中心服务建设的探索与实践”向与会嘉宾进行了介绍，他提到，医院服务范围140平方公里，覆盖近100万的人口，智慧医疗大有可为，互联网+医疗的发展已经按下了加速键，接下来将积极打造与基层医院互通共享的信息数据库，指导基层医生更精准的治疗、转诊患者。同时，依托互联网医院平台，让患者获取优质医疗服务的便捷度大大提高。\n在答记者问环节，孙万驹院长、信息科朱海燕科长、医务部祁炜罡主任等纷纷就相关问题进行了解答。\n我院是全市首家完成医疗付费一件事、互联网医院线上医保支付、互联网医疗收费电子票据试点三项改革工作的区级医院。其中核酸检测电子票据很受检测者欢迎。通过医院公众号预约核酸检测时间，手机付费后，立即生成电子票据，检测四小时左右即可将报告发送至手机。避免检测者往返跑节省时间，还减少了人群聚集。\n随后，记者团一行移步门诊自助服务区和肾内科诊间进行了现场采访。\n李女士居住在浦东川沙新镇，经常到家附近的我院就医。这次来到医院注意到推出了电子医保凭证服务，在志愿者的指导下她也尝鲜通过手机申领电子医保凭证，不用实体医保卡，挂号看诊，医生开药后，诊室内医保电子凭证扫码，药物医保部分自动结算，她只需手机支付自费部分，不用再去付费窗口排队付费，就可以直接去药房取药。李女士说，“我觉得不复杂的，像我们50岁左右的人用起来都是很方便的，那万一再忘记带卡呀什么的，都是特别方便。”\n传统就医过程中，实体医保卡必不可缺。而今却大不一样，患者通过手机就能申领“医保电子凭证”，一部手机无需带卡，全程只要“扫一扫”二维码，就能完成所有就诊流程。小杨来到医院肾内科就诊，从挂号、候诊、问诊、付费到取药，彻底实现“一码通行、无感就医”，“开始以为只要一部手机畅行，只是想象中的场面，自己亲身体验，从诊间绑定医保卡到完成支付，全过程不到10分钟，真的太方便了！”小杨说。\n我院是全市建设的首批区域性医疗中心，我院亦是川沙医疗联合体牵头单位。医联体内包括三家专科医院（浦东新区中医医院、浦东新区肺科医院、浦东新区传染病医院），10家社区卫生服务中心（川沙、黄楼、江镇、唐镇、合庆、王港、机场、孙桥、曹路、张江社区卫生服务中心）。互联网时代，医联体将怎样利用线上技术挖掘内涵？川沙医联体自去年便开始了尝试探索。\n医联体内，居民对大型仪器检查设备（如CT、MRI等）的服务需求不断加大。以往至少需要“跑三次”，持首诊医院收费凭证到浦东新区人民医院预约，拍片，取报告，才能拿到检查报告。怎样让患者从“跑三次”变为“一次解决”？医联体尝试在专科医院门诊、住院医生站直接预约我院检查，拍完片后，报告直接传回原医疗机构。“一次解决”大大便捷了区域居民。由我院牵头的川沙医联体依托浦东新区卫生信息平台，推进区域影像、检验等远程诊断中心建设，力求达到同质化、标准化、规范化。\n在疫情期间，这种拍片检查只跑一次的“互联网+医联体”模式又再一次发挥了重要作用，社区发热哨点发现的“待查”病人，通过信息系统，直报到具有检查能力的上级医院，整个检查过程实现有序闭环：“需要进一步的做CT的时候，用这样一个医联体的远程诊断的一体化的流程，在当地进行预约，由救护车转运到我院发热门诊区域方舱CT，在预定的时间段进行检查，检查完，再由救护车转运回社区，全程闭环管理转运。\n此外，我院还充分利用互联网医院平台，应用于线上多学科会诊、社区医院远程指导，在一部手机“方寸间”打破物理空间，实现多学科诊疗之时，也帮助患者更好地参与全程管理，以此解决长久以来分级诊疗不连贯、时间滞后的“痛点”，更好满足患者诊疗需求。依托互联网技术，优化就医流程，通过智慧医疗，辐射带动社区医院，让浦东川沙区域居民看病更便捷、更安心。不断努力提升区域医疗服务能级、更好满足区域居民健康需求。\n服务实用指南\nQ:\n在医院，如何使用医保电子凭证就医？\nA:\n医保电子凭证领取后，在微信-我的-卡包-票证或支付宝首页-卡包-证件中找到医保电子凭证凭证，线下直接扫码支付。\nQ:\n在互联网医院，如何使用医保电子凭证就医？\nA:\n除通过上述等渠道申领医保电子凭证，也可以通过浦东新区人民医院互联网医院（以下简称浦人民云医院）首页申领并激活医保电子凭证\n若患者未开通医保电子凭证，选择“使用医保支付”结算时，会自动调转到医保电子凭证申领的界面，引导患者申领并激活医保电子凭证。\nQ:\n如何享受“信用无感支付”服务？\nA:\n医疗付费“一件事”工程，依托中国银联、商业银行、第三方支付平台等支付通道及其线上信用产品，向本市医保参保人员提供“基于信用的无感支付服务”，让就医群众到达医生诊室时，只需出示其“医保电子凭证”（随申码），目前可通过随申办APP和随申办微信小程序两个渠道。\n患者在医生诊间完成诊疗服务后，信息系统自动发起基于信用的无感支付服务，发生医疗费用的医保部分实时结算、自费部分由签约绑定的信用账户进行自动支付，在整个过程中，患者可以无需做任何付费动作，真正实现就医过程的无感支付。\n同时，为满足部分人群传统窗口付费的习惯，医院仍保留部分收费窗口。\n新知识贴士\nQ:\n“医保电子凭证”是什么东东？\nA:\n它是由国家医保信息平台统一签发，是基于医保基础信息库为全体参保人员生成的医保身份识别电子介质。\n医保电子凭证通过实名、实人认证技术，采用加密算法形成电子标识，具备安全可靠、认证唯一等重要特点。\n参保人可以通过电子凭证享受各类在线医疗保障服务，包括医保业务办理、医保账户查询、医保就诊和购药支付等。\nQ:\n医保电子凭证安全吗？手机丢了怎么办？\nA:\n国家医保局表示，“安全性可以放心”，医保电子凭证通过实名和实人认证，采用加密算法、动态二维码展示，以确保个人信息和医保基金使用安全。\nQ:\n电子票据合法吗？可以用来报销吗？\nA:\n关于合法问题：\n本市根据财政部、国家卫生健康委、国家医保局《关于全面推行医疗收费电子票据管理改革的通知》有关要求设置、开具医疗收费电子票据，票据使用人可通过财政部财政票据验证网站查验票据真伪。\n互联网医院推行医疗收费电子票据以后，不再提供纸质票据，电子票与纸质票具有同等法律效用，患者可自行打印。\n关于报销：\n根据财政部、国家档案局《会计档案管理办法》《关于规范电子会计凭证报销入账归档的通知》有关要求，来源合法真实的医疗收费电子票据与纸质票具有同等法律效力，符合相关规定的可以报销入账归档。</p>\n<p>原标题：《【浦人医·关注】“智慧医疗推进区域医疗中心建设”采访活动现场探访浦东新区人民医院》</p>"},{"fields":{"filename":"20201202_核酸检测全流程只需跑一次"},"frontmatter":{"id":null,"title":"【医院动态】浦东人民医院“互联网+”服务再升级 核酸检测全流程只需“跑一次”","subtitle":null,"subject":null,"author":null,"keywords":null,"tags":null,"category":"医院动态","cover":"https://news.online.sh.cn/news/gb/content/attachement/jpg/site1/20201202/IMGf48e389446e855687863583.jpg","created_when":null,"updated_when":null,"date":"2020-12-02"},"excerpt":"…","html":"<p>“因为工作原因，我要经常出差，今年已经做过六七次核酸检测了。”李女士是浦东川沙本地人，近日又要离沪出差，特地到医院做核酸检测。\n为适应疫情防控需要，很多市民在离沪出行时选择带上“个人七日内核酸检测健康证明”。连日来，浦东新区人民医院迎来了一波又一波核酸检测大客流。所幸，依托于互联网医院的发展，在这里，预约核酸检测十分便捷。市民只需通过医院微信公众号“浦人民云医院”进行预约申请，完成线上缴费后按预约时间直接到院进行采集、检测；24小时后，可在“云医院”医技订单直接下载核酸检测报告并打印，全程只需“跑一次”。\n截至目前，“浦人民云医院”服务已达99110人次，其中核酸检测预约达到41847人次。\n<strong>“云医院”预约分流80%以上检测者</strong>\n“早先做检测，我先要到门诊挂号开具检查单，之后再排队采样，第二天还要再到医院发热门诊领取报告。”李女士告诉记者，这些原本繁琐的核酸检测流程有了“简化版”：只需登录“浦人民云医院”，便可直接在手机上预约检测，下载报告和发票，自己打印也完全没难度，符合快节奏工作的需求。\n面对突如其来的新冠疫情，互联网医院的优势显而易见。今年3月24日，浦东新区人民医院获批互联网医院牌照，“浦人民云医院”正式上线运营。\n“据医院统计，11月22日、23日，医院日均受理核酸检测预约人次突破6000。”浦东新区人民医院信息科科长朱海燕直言，作为疫情防控发热定点医院以及浦东国际机场定点医院，浦东新区人民医院覆盖近100万人口的医疗服务工作，压力可想而知。面对超大的核酸检测预约量，互联网医院实际已经分流了80%以上的检测者。\n“我们‘云医院’平台核酸检测的预约、线上缴费、电子票据生成和检测报告自动发送功能特别受青睐。”朱海燕说，一环扣一环的便捷体验，避免了市民的往返跑，不仅减少了检测者在医院停留的时间，也降低了因人员聚集而引起的交叉感染风险。\n<strong>采取有效科技手段，开足马力优化服务</strong>\n疫情之下，互联网医院发展跑出加速度。上线“新冠核酸检测线上预约和付费”服务，仅是“浦人民云医院”功能中的一环。\n“云医院”以实体医院为依托，以在线复诊和常规咨询为主，集问诊、开方、检查检验、支付及药品配送为一体的一站式服务平台，打通了患者、医院、配送的“无接触”式就医通道。在医护有限、时间紧迫的条件下，浦东新区人民医院采用了有效的科技手段，将疫情防控与互联网技术相结合，创建了区域性医疗中心互联网医院的新模式。\n目前，院方已形成一套相对完备的工作机制：每天根据互联网核酸检测预约数，增派相应人数的护士和志愿者支援，增加采样点位；检验科派足人马轮流进舱，所有机器不间断运作，增设专人负责接收标本并扫码入库，加快检测速度，保证报告及时出具……\n通过互联网医院几个月的运营，医院开足马力、不断优化便捷服务，同时开发新功能。\n近期，“浦人民云医院”还改版了微信公众号，增加了当日挂号、诊间缴费、住院预缴金、病案复印、云影像和医保脱卡支付等功能，下一步，医院还将积极打造与基层医院互通共享的信息数据库，指导基层医生更精准地治疗、转诊患者。</p>\n<h1>报错1：<code>无法加载文件 C:\\Users\\XXXX\\AppData\\Roaming\\npm\\yarn.ps1，因为在此系统上禁止运行脚本</code></h1>\n<h2>解决办法</h2>\n<p>管理员运行 <code>powershell</code> 并执行命令：<code>set-ExecutionPolicy RemoteSigned</code></p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://blog.csdn.net/witjylzt/article/details/105136274\">无法加载文件</a></li>\n</ul>\n<h1>报错2：<code>yarn start</code> 命令 无法被识别并启动</h1>\n<h2>解决办法</h2>\n<ol>\n<li>退出 <code>VS Code</code></li>\n<li>右键查看 <code>VS Code</code> 的 <code>属性</code></li>\n<li>在 <code>兼容性</code> Tab 页中，勾选 <code>以管理员身份运行此程序</code></li>\n<li>重新启动 <code>VS Code</code></li>\n</ol>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://blog.csdn.net/jiangwei1994/article/details/81771963\">vs code终端命令不能使用解决方法</a></li>\n</ul>"},{"fields":{"filename":"20210125002_docker_compose_setup"},"frontmatter":{"id":"20210125002_docker_compose_setup","title":"Docker Compose 的安装设置","subtitle":"CentOS 下 Docker 和 Docker Compose 的安装配置","subject":"开发环境","author":"Chis Wei","keywords":"Docker;Docker Compose;集成环境","tags":null,"category":"指导手册","cover":null,"created_when":"2021-01-25","updated_when":"2021-01-25","date":null},"excerpt":"Docker Compose 的安装设置 参考文章 Get Docker Engine - Community for…","html":"<h1>Docker Compose 的安装设置</h1>\n<h2>参考文章</h2>\n<ul>\n<li><a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\">Get Docker Engine - Community for CentOS</a></li>\n<li><a href=\"https://www.cnblogs.com/morang/p/9501223.html\">docker 及 docker-compose 的快速安装和简单使用</a></li>\n</ul>\n<h2>Install Docker</h2>\n<ol>\n<li>SET UP THE REPOSITORY</li>\n</ol>\n<pre><code># sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n# sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre>\n<ol start=\"2\">\n<li>INSTALL DOCKER ENGINE - COMMUNITY</li>\n</ol>\n<pre><code># sudo yum install docker-ce docker-ce-cli containerd.io\n</code></pre>\n<ol start=\"3\">\n<li>Start Docker</li>\n</ol>\n<pre><code>$ sudo systemctl start docker\n</code></pre>\n<ol start=\"4\">\n<li>Verify that Docker Engine - Community is installed correctly by running the hello-world image.</li>\n</ol>\n<pre><code>$ sudo docker run hello-world\n</code></pre>\n<ol start=\"5\">\n<li>Verify that Docker Engine - Community is installed correctly by running the whalesay image. (Optional)</li>\n<li><a href=\"https://hub.docker.com/r/docker/whalesay\">docker/whalesa</a></li>\n</ol>\n<pre><code>$ docker run docker/whalesay cowsay boo\n</code></pre>\n<h2>使用中国区官方镜像</h2>\n<ol>\n<li>create json file</li>\n</ol>\n<pre><code># vi /etc/docker/daemon.json\n# cat /etc/docker/daemon.json\n</code></pre>\n<blockquote>\n<p>daemon.json</p>\n</blockquote>\n<pre><code>{\n  \"registry-mirrors\": [\"https://registry.docker-cn.com\"]\n}\n</code></pre>\n<ol start=\"2\">\n<li>restart docker</li>\n</ol>\n<pre><code># systemctl daemon-reload\n# systemctl restart docker\n# systemctl restart docker.service\n</code></pre>\n<ol start=\"3\">\n<li>reboot server</li>\n</ol>\n<pre><code># reboot\n</code></pre>\n<h2>Docker Compose</h2>\n<ol>\n<li>Download Docker Compose (with Daocloud Mirror)</li>\n</ol>\n<pre><code># curl -L https://get.daocloud.io/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n</code></pre>\n<ol>\n<li>Apply executable permissions to the binary:</li>\n</ol>\n<pre><code># chmod +x /usr/local/bin/docker-compose\n</code></pre>\n<ol>\n<li>Verify that Docker Compose</li>\n</ol>\n<pre><code># docker-compose --version\n</code></pre>\n<h2>基本命令</h2>\n<h3>run - Run a container</h3>\n<ul>\n<li>tag</li>\n</ul>\n<pre><code># docker run redis:4.0\n</code></pre>\n<ul>\n<li>STDIN</li>\n<li>-it (interactive mode, attach terminal)</li>\n<li>attach / detach (-d)</li>\n<li>Port Mapping (external:internal)</li>\n</ul>\n<pre><code># docker run -p 8001:3000 xxxxx\n# docker run -p 8002:3000 xxxxx\n# docker run -p 8003:3000 xxxxx\n# docker run -p 8004:3000 xxxxx\n</code></pre>\n<ul>\n<li>Volume Mapping</li>\n</ul>\n<pre><code># docker run --name db_pg_1 -v /my/own/datadir:/var/lib/postgresql/data -d postgres\n</code></pre>\n<ul>\n<li>Environment Variables</li>\n</ul>\n<pre><code># docker run -e APP_COLOR=blue XXXX\n</code></pre>\n<h3>ps - List containers</h3>\n<h3>stop - Stop a container</h3>\n<h3>rm - Remove a container</h3>\n<h3>rmi - Remove images</h3>\n<h3>pull - Download an image</h3>\n<h3>exec - Execute a command</h3>\n<h3>attach - attach a container</h3>\n<h3>inspect - inspect a container</h3>\n<h3>logs - show container's log</h3>\n<h3>示例</h3>\n<pre><code># docker run centos\n# docker run -it centos bash\n# docker ps\n# docker ps -a\n# docker run centos sleep 20\n# docker run -d --name thistest centos sleep 100\n# docker exec thistest cat /etc/*release*\n# docker stop thistest\n# docker rm xxx xxx xxx\n# docker images\n# docker rmi xxxx\n# docker pull centos\n# docker inspect thistest\n# docker logs thistest\n</code></pre>\n<h2>典型镜像</h2>\n<h3>使用 Node:alpine 启动 js 脚本</h3>\n<pre><code># docker run -it --rm --name node_main_1 -v \"$PWD\":/usr/src/app -w /usr/src/app node:11.10.1-alpine node index.js\n</code></pre>\n<h3>使用 postgres:alpine 管理数据库</h3>\n<ol>\n<li>下载镜像</li>\n</ol>\n<pre><code># docker pull postgres:alpine\n</code></pre>\n<ol>\n<li>启动容器</li>\n</ol>\n<pre><code># docker run --name dbpg -e POSTGRES_PASSWORD=123456 -p 5432:5432 -d postgres:alpine\n</code></pre>\n<ol>\n<li>进入容器</li>\n</ol>\n<pre><code># docker exec -it dbpg /bin/bash\n</code></pre>\n<ol>\n<li>启动 psql </li>\n</ol>\n<pre><code>psql -U postgres -d postgres\n</code></pre>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://kodekloud.com/courses/296044\">Docker for the Absolute Beginner - Hands On</a></li>\n<li><a href=\"https://docs.docker.com/\">Docker Documents</a></li>\n<li><a href=\"https://www.jianshu.com/p/9ab7b89637e7\">docker实现postgresql</a></li>\n<li><a href=\"https://www.cnblogs.com/whych/p/9595671.html\">Docker网络和容器的通信</a></li>\n<li><a href=\"https://blog.csdn.net/u013355826/article/details/84987233\">docker中容器之间通信方式</a></li>\n<li><a href=\"https://www.cnblogs.com/neptunemoon/p/6512121.html#toc_30\">使用docker-compose 大杀器来部署服务</a></li>\n</ul>\n<h2>集成环境</h2>\n<h3>下载 Node 镜像</h3>\n<pre><code># docker pull node:12.14.0-alpine\n</code></pre>\n<h3>安装 Nodejs</h3>\n<ol>\n<li>download and install npm binary pakage</li>\n</ol>\n<pre><code>[root@ ~]# wget https://nodejs.org/dist/v12.14.0/node-v12.14.0-linux-x64.tar.xz\n[root@ ~]# tar -xvf node-v12.14.0-linux-x64.tar.xz\n[root@ ~]# ln -s ~/node-v12.14.0-linux-x64/bin/node /usr/bin/node\n[root@ ~]# ln -s ~/node-v12.14.0-linux-x64/bin/npm /usr/bin/npm\n[root@ ~]# npm -v\n[root@ ~]# node -v\n</code></pre>\n<p>可以使用国内镜像</p>\n<pre><code>[root@ ~]# wget https://npm.taobao.org/mirrors/node/v12.14.0/node-v12.14.0-linux-x64.tar.gz\n</code></pre>\n<blockquote>\n<p>install wget in case it is not installed</p>\n</blockquote>\n<pre><code>[root@ ~]# yum -y install wget\n</code></pre>\n<ol start=\"2\">\n<li>edit profile</li>\n</ol>\n<pre><code>[root@ ~]# vim /etc/profile\n[root@ ~]# cat /etc/profile\n</code></pre>\n<blockquote>\n<p>profile file content</p>\n</blockquote>\n<pre><code>export NODE_PATH=\"/root/node-v12.14.0-linux-x64\"\nexport PATH=$NODE_PATH/bin:$PATH\n</code></pre>\n<ol start=\"3\">\n<li>restart the server from console</li>\n</ol>\n<pre><code>[root@ ~]# reboot\n</code></pre>\n<ol start=\"4\">\n<li>install global npm packages</li>\n</ol>\n<pre><code>[root@ ~]# npm install -g yarn\n</code></pre>\n<pre><code>[root@ ~]# npm install -g gulp\n[root@ ~]# npm install -g cross-env\n[root@ ~]# npm install -g rimraf\n</code></pre>\n<p>可以使用淘宝镜像</p>\n<pre><code>npm install xxxx -g --registry=http://registry.npm.taobao.org\n</code></pre>"},{"fields":{"filename":"20210125005_pg_crosstab"},"frontmatter":{"id":"20210125005_pg_crosstab","title":"postgres 数据库的数据透视表","subtitle":"利用 pg 数据库的 crosstab 扩展功能，实现类似数据透视表的数据分类查询统计","subject":"数据统计","author":"Chis Wei","keywords":"postgres;crosstab;pivot;行列转置","tags":"postgresql","category":"实战技巧","cover":null,"created_when":"2021-01-25","updated_when":"2021-01-25","date":null},"excerpt":"…","html":"<h1>背景 &#x26; 需求</h1>\n<p>几乎所有系统的<code>数据表</code>，可能都会有一些<code>状态字段</code>，这些字段的取值是有限个<code>状态</code>。无论是运营的需求层面，还是程序运行的业务逻辑判断层面，往往需要对这些<code>数据表</code>中的记录，根据不同的状态进行汇总统计，获取不同状态下，所有记录的统计结果。</p>\n<p>例如，假设一个 <em>任务</em> <code>数据表</code>(<code>t_tasks</code>)：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">id</th>\n<th align=\"center\">project_code</th>\n<th align=\"center\">state</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">1001</td>\n<td align=\"center\">PRJ_1</td>\n<td align=\"center\">WORKING</td>\n</tr>\n<tr>\n<td align=\"center\">1002</td>\n<td align=\"center\">PRJ_1</td>\n<td align=\"center\">WORKING</td>\n</tr>\n<tr>\n<td align=\"center\">1003</td>\n<td align=\"center\">PRJ_1</td>\n<td align=\"center\">DONE</td>\n</tr>\n<tr>\n<td align=\"center\">1004</td>\n<td align=\"center\">PRJ_2</td>\n<td align=\"center\">PENDING</td>\n</tr>\n<tr>\n<td align=\"center\">1005</td>\n<td align=\"center\">PRJ_2</td>\n<td align=\"center\">WORKING</td>\n</tr>\n<tr>\n<td align=\"center\">1006</td>\n<td align=\"center\">PRJ_2</td>\n<td align=\"center\">WORKING</td>\n</tr>\n<tr>\n<td align=\"center\">1007</td>\n<td align=\"center\">PRJ_2</td>\n<td align=\"center\">DONE</td>\n</tr>\n<tr>\n<td align=\"center\">1008</td>\n<td align=\"center\">PRJ_3</td>\n<td align=\"center\">PENDING</td>\n</tr>\n<tr>\n<td align=\"center\">1009</td>\n<td align=\"center\">PRJ_3</td>\n<td align=\"center\">WORKING</td>\n</tr>\n</tbody>\n</table>\n<p>期望得到这样的统计结果：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">project_code</th>\n<th align=\"center\">pending</th>\n<th align=\"center\">working</th>\n<th align=\"center\">done</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">PRJ_1</td>\n<td align=\"center\"></td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">PRJ_2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">PRJ_3</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\"></td>\n</tr>\n</tbody>\n</table>\n<h1>解决方案</h1>\n<pre><code>SELECT *\nFROM crosstab(\n  'SELECT project_code::text, state, count(id) FROM t_tasks GROUP BY grouping sets((project_code, state)) ORDER BY 1,2',\n  $$values('PENDING'::text),('WORKING'::text),('DONE'::text)$$\n)\nAS (project text, PENDING int, WORKING int, DONE int)\n</code></pre>\n<blockquote>\n<p><code>crosstab</code> 是 <code>postgres</code> 的扩展功能，使用之前，需要安装相关扩展</p>\n</blockquote>\n<h1>说明</h1>\n<ul>\n<li><code>$$</code> 相当于单引号（<code>crosstab</code> 的参数是一个 SQL 语句字符串，字符串是由单引号括起来的，因此，在单引号里面，不能再使用单引号，这时候，可以使用 <code>$$</code> 代替单引号）</li>\n<li><code>crosstab</code> 有两个<code>入参</code>：<code>数据集</code>，<code>状态集</code></li>\n<li><code>数据集</code>有三列：<code>行标识</code>, <code>状态</code>, <code>取值</code></li>\n<li><code>状态集</code>：所有状态的列表</li>\n</ul>\n<h3>中间结果</h3>\n<p><code>SELECT project_code::text, state, count(id) FROM t_tasks GROUP BY grouping sets((project_code, state)) ORDER BY 1,2</code></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">project_code</th>\n<th align=\"center\">state</th>\n<th align=\"center\">count</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">PRJ_1</td>\n<td align=\"center\">WORKING</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">PRJ_1</td>\n<td align=\"center\">DONE</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">PRJ_2</td>\n<td align=\"center\">PENDING</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">PRJ_2</td>\n<td align=\"center\">WORKING</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">PRJ_2</td>\n<td align=\"center\">DONE</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">PRJ_3</td>\n<td align=\"center\">PENDING</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">PRJ_3</td>\n<td align=\"center\">WORKING</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody>\n</table>\n<h1>关键点</h1>\n<ul>\n<li>构造一个 SQL 语句，能够取得中间结果；这个 SQL 语句，就是 <code>crosstab</code> 的第一个参数：<code>数据集</code></li>\n<li>指明一个<code>状态集</code>，作为 <code>crosstab</code> 的第二个参数</li>\n</ul>\n<h1>补充</h1>\n<h2>状态集 的构造方式</h2>\n<h3>固定的<code>状态集</code></h3>\n<pre><code>$$values('PENDING'::text),('WORKING'::text),('DONE'::text)$$\n</code></pre>\n<h3>动态的<code>状态集</code>，动态构造</h3>\n<pre><code>const stateArray = ['PENDING', 'WORKING', 'DONE']\nconst cstr = ....\nconst sql = `\n  SELECT \n    distinct qa.serial_code AS id,\n    fb.form_serial_code, fb.form_title, form_index, fb.form_id, \n    fb.notice_template_id, fb.notice_template_code,\n    fb.notice_serial_code, fb.notice_title, fb.notice_id, \n    fb.employer_path, fb.employer_id, \n    fb.source_path, fb.source_id, \n    fb.created_by,\n    fb.created_when,\n    fb.updated_by,\n    fb.updated_when,\n    qa.* \n  FROM crosstab(\n    'SELECT serial_code, question_key, answer_value FROM dbt_biz_logs WHERE ${cstr} ORDER BY 1, 2',\n    'SELECT * FROM unnest(array[${stateArray}]) as exp'\n  )\n  AS qa(serial_code text, ${qtuple})\n  LEFT JOIN dbt_biz_logs fb ON fb.serial_code=qa.serial_code AND fb.category='FORM_FEEDBACK_QA'\n`\n</code></pre>\n<h3>来自数据库的枚举类型</h3>\n<pre><code>'SELECT e.enumlabel FROM pg_type t, pg_enum e WHERE t.oid=e.enumtypid AND t.typname=''dbe_workflow_task_result'' ORDER BY 1'\n</code></pre>"},{"fields":{"filename":"20210125003_k8s_cluster_setup"},"frontmatter":{"id":"20210125003_k8s_cluster_setup","title":"Kubernetes (k8s) 集群安装部署","subtitle":"在 CentOS 服务器环境下，K8S 一主一从的集群安装","subject":"云原生","author":"Chis Wei","keywords":"kubernetes;k8s;LENS;Ingress","tags":null,"category":"指导手册","cover":null,"created_when":"2021-01-25","updated_when":"2021-01-25","date":null},"excerpt":"Kubernetes (k8s) 集群安装部署 环境概述 阿里云 (athena) ECS (2C 8G) x…","html":"<h1>Kubernetes (k8s) 集群安装部署</h1>\n<h2>环境概述</h2>\n<ul>\n<li>阿里云 (athena) ECS (2C 8G) x2</li>\n<li>CentOS 7.8</li>\n<li>kubernetes 1.18</li>\n<li>[Master Public IP] ([Master Private IP]): k8s-m1 (master)</li>\n<li>[Worker Public IP] ([Worker Private IP]): k8s-w1 (worker)</li>\n</ul>\n<h2>准备工作</h2>\n<h4>检查操作系统版本</h4>\n<pre><code># cat /etc/redhat-release\nCentOS Linux release 7.8.2003 (Core)\n</code></pre>\n<h4>检查并修改机器名称</h4>\n<pre><code># hostname\n# hostnamectl\n# cat /etc/hostname\n</code></pre>\n<pre><code># vi /etc/hostname\n</code></pre>\n<pre><code>k8s-m1\n</code></pre>\n<pre><code># systemctl restart systemd-hostnamed\n</code></pre>\n<pre><code># reboot\n</code></pre>\n<h4>配置集群 hosts (私有地址)</h4>\n<pre><code># vi /etc/hosts\n</code></pre>\n<pre><code>[Master Private IP] k8s-m1\n[Worker Private IP] k8s-w1\n</code></pre>\n<h4>禁用<code>防火墙</code></h4>\n<pre><code># systemctl stop firewalld &#x26;&#x26; systemctl disable firewalld\n# systemctl stop firewalld\n</code></pre>\n<h4>禁用<code>selinux</code></h4>\n<pre><code># setenforce 0\n# sed -i '7s/enforcing/disabled/' /etc/selinux/config\n</code></pre>\n<pre><code># reboot\n</code></pre>\n<h4>创建配置文件（<code>/etc/sysctl.d/k8s.conf</code>）</h4>\n<blockquote>\n<p>创建文件并添加内容</p>\n</blockquote>\n<pre><code># cat >/etc/sysctl.d/k8s.conf &#x3C;&#x3C;EOF\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.ipv4.ip_forward = 1\nEOF\n</code></pre>\n<blockquote>\n<p>执行命令使之生效</p>\n</blockquote>\n<pre><code># modprobe br_netfilter &#x26;&#x26; sysctl -p /etc/sysctl.d/k8s.conf\n</code></pre>\n<h4>安装ipvs</h4>\n<blockquote>\n<p>创建文件并添加内容（保证在节点重启后能自动加载所需模块）</p>\n</blockquote>\n<pre><code># cat > /etc/sysconfig/modules/ipvs.modules &#x3C;&#x3C;EOF\n#!/bin/bash\nmodprobe -- ip_vs\nmodprobe -- ip_vs_rr\nmodprobe -- ip_vs_wrr\nmodprobe -- ip_vs_sh\nmodprobe -- nf_conntrack_ipv4\nEOF\n</code></pre>\n<blockquote>\n<p>修改权限以及查看是否已经正确加载所需的内核模块</p>\n</blockquote>\n<pre><code># chmod 755 /etc/sysconfig/modules/ipvs.modules &#x26;&#x26; bash /etc/sysconfig/modules/ipvs.modules\n</code></pre>\n<blockquote>\n<p>查看是否已经正确加载所需的内核模块</p>\n</blockquote>\n<pre><code># lsmod | grep -e ip_vs -e nf_conntrack_ipv4\nnf_conntrack_ipv4      15053  0 \nnf_defrag_ipv4         12729  1 nf_conntrack_ipv4\nip_vs_sh               12688  0 \nip_vs_wrr              12697  0 \nip_vs_rr               12600  0 \nip_vs                 145497  6 ip_vs_rr,ip_vs_sh,ip_vs_wrr\nnf_conntrack          139264  2 ip_vs,nf_conntrack_ipv4\nlibcrc32c              12644  2 ip_vs,nf_conntrack\n</code></pre>\n<blockquote>\n<p>安装 <code>ipset</code> 和 <code>ipvsadm</code> (便于查看 ipvs 的代理规则)</p>\n</blockquote>\n<pre><code># yum -y install ipset ipvsadm\n</code></pre>\n<h4>同步服务器时间</h4>\n<blockquote>\n<p>安装chrony</p>\n</blockquote>\n<pre><code># yum -y install chrony\n</code></pre>\n<blockquote>\n<p>修改同步服务器地址为阿里云</p>\n</blockquote>\n<pre><code># sed -i.bak '3,6d' /etc/chrony.conf &#x26;&#x26; sed -i '3cserver ntp1.aliyun.com iburst' /etc/chrony.conf\n</code></pre>\n<blockquote>\n<p>启动<code>chronyd</code>及加入开机自启</p>\n</blockquote>\n<pre><code># systemctl start chronyd &#x26;&#x26; systemctl enable chronyd\n</code></pre>\n<blockquote>\n<p>查看同步结果</p>\n</blockquote>\n<pre><code># chronyc sources\n</code></pre>\n<h4>关闭<code>swap</code>分区</h4>\n<blockquote>\n<p>手动关闭swap</p>\n</blockquote>\n<pre><code># swapoff -a\n</code></pre>\n<blockquote>\n<p>修改fstab文件，注释swap自动挂载 (!!!!!! 此处有些问题：貌似原文件中并没有这句话，因此这个命令实际并未发生作用 !!!!!!)</p>\n</blockquote>\n<pre><code># sed -i '/^\\/dev\\/mapper\\/centos-swap/c#/dev/mapper/centos-swap swap                    swap    defaults        0 0' /etc/fstab\n</code></pre>\n<blockquote>\n<p>查看swap是否关闭</p>\n</blockquote>\n<pre><code># free -m\n              total        used        free      shared  buff/cache   available\nMem:           7821         123        7395           0         301        7472\nSwap:             0           0           0\n</code></pre>\n<blockquote>\n<p><code>swappiness</code> 参数调整，修改<code>/etc/sysctl.d/k8s.conf</code>添加下面一行</p>\n</blockquote>\n<pre><code># cat >>/etc/sysctl.d/k8s.conf &#x3C;&#x3C;EOF\nvm.swappiness=0\nEOF\n</code></pre>\n<blockquote>\n<p>使配置生效</p>\n</blockquote>\n<pre><code># sysctl -p /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.ipv4.ip_forward = 1\nvm.swappiness = 0\n</code></pre>\n<h2>安装</h2>\n<h4>安装 Docker18.09.9</h4>\n<blockquote>\n<p>安装 <code>yum-utils</code> 命令包，从而可以使用 <code>yum-config-manager</code> 命令</p>\n</blockquote>\n<pre><code>yum -y install yum-utils\n</code></pre>\n<blockquote>\n<p>添加阿里云yum源</p>\n</blockquote>\n<pre><code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n</code></pre>\n<blockquote>\n<p>查看可用版本</p>\n</blockquote>\n<pre><code>yum list docker-ce --showduplicates | sort -r\n已加载插件：fastestmirror, langpacks\n可安装的软件包\n * updates: mirrors.aliyun.com\nLoading mirror speeds from cached hostfile\n * extras: mirrors.aliyun.com\ndocker-ce.x86_64            3:19.03.5-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:19.03.4-3.el7                     docker-ce-stable\n。。。。。。\ndocker-ce.x86_64            3:18.09.9-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.8-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.7-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.6-3.el7                     docker-ce-stable\n。。。。。。\n</code></pre>\n<blockquote>\n<p>安装docker18.09.9</p>\n</blockquote>\n<pre><code>yum -y install docker-ce-18.09.9-3.el7 docker-ce-cli-18.09.9\n</code></pre>\n<blockquote>\n<p>启动docker并设置开机自启</p>\n</blockquote>\n<pre><code>systemctl enable docker &#x26;&#x26; systemctl start docker\n</code></pre>\n<blockquote>\n<p>配置阿里云docker镜像加速</p>\n</blockquote>\n<pre><code>cat > /etc/docker/daemon.json &#x3C;&#x3C;-'EOF'\n{\n  \"registry-mirrors\": [\"https://gqk8w9va.mirror.aliyuncs.com\"]\n}\nEOF\n</code></pre>\n<blockquote>\n<p>配置完后重启docker</p>\n</blockquote>\n<pre><code>systemctl restart docker\n</code></pre>\n<blockquote>\n<p>查看加速</p>\n</blockquote>\n<pre><code>docker info\n</code></pre>\n<p>找到Registry Mirrors一行\nRegistry Mirrors:\n<a href=\"https://gqk8w9va.mirror.aliyuncs.com/\">https://gqk8w9va.mirror.aliyuncs.com/</a></p>\n<blockquote>\n<p>查看docker版本</p>\n</blockquote>\n<pre><code>docker version\n\nClient:\n Version:           18.09.9\n API version:       1.39\n Go version:        go1.11.13\n Git commit:        039a7df9ba\n Built:             Wed Sep  4 16:51:21 2019\n OS/Arch:           linux/amd64\n Experimental:      false\n\nServer: Docker Engine - Community\n Engine:\n  Version:          18.09.9\n  API version:      1.39 (minimum version 1.12)\n  Go version:       go1.11.13\n  Git commit:       039a7df\n  Built:            Wed Sep  4 16:22:32 2019\n  OS/Arch:          linux/amd64\n  Experimental:     false\n</code></pre>\n<h4>修改<code>docker Cgroup Driver</code>为<code>systemd</code></h4>\n<blockquote>\n<p>将/usr/lib/systemd/system/docker.service文件中的这一行 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock\n修改为 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd\n如果不修改，在添加 worker 节点时可能会碰到如下错误\n[WARNING IsDockerSystemdCheck]: detected \"cgroupfs\" as the Docker cgroup driver. The recommended driver is \"systemd\".\nPlease follow the guide at <a href=\"https://kubernetes.io/docs/setup/cri/\">https://kubernetes.io/docs/setup/cri/</a></p>\n</blockquote>\n<blockquote>\n<p>使用如下命令修改</p>\n</blockquote>\n<pre><code>sed -i.bak \"s#^ExecStart=/usr/bin/dockerd.*#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd#g\" /usr/lib/systemd/system/docker.service\n</code></pre>\n<blockquote>\n<p>重启docker</p>\n</blockquote>\n<pre><code>systemctl daemon-reload &#x26;&#x26; systemctl restart docker\n</code></pre>\n<h4>安装<code>Kubeadm</code></h4>\n<blockquote>\n<p>使用阿里云<code>yum</code>源</p>\n</blockquote>\n<pre><code>cat >/etc/yum.repos.d/kubernetes.repo &#x3C;&#x3C;EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg\n        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n</code></pre>\n<blockquote>\n<p>安装 <code>kubeadm</code>、<code>kubelet</code>、<code>kubectl</code> (阿里云yum源会随官方更新最新版，因此指定版本)</p>\n</blockquote>\n<blockquote>\n<p>安装1.18.4版本</p>\n</blockquote>\n<pre><code>yum -y install kubelet-1.18.4 kubeadm-1.18.4 kubectl-1.18.4\n</code></pre>\n<blockquote>\n<p>查看版本</p>\n</blockquote>\n<pre><code>kubeadm version\n\nkubeadm version: &#x26;version.Info{Major:\"1\", Minor:\"16\", GitVersion:\"v1.18.4\", GitCommit:\"a17149e1a189050796ced469dbd78d380f2ed5ef\", GitTreeState:\"clean\", BuildDate:\"2020-04-16T11:42:30Z\", GoVersion:\"go1.13.9\", Compiler:\"gc\", Platform:\"linux/amd64\"}\n</code></pre>\n<blockquote>\n<p>设置<code>kubelet</code>开机自启</p>\n</blockquote>\n<pre><code>systemctl enable kubelet\n</code></pre>\n<blockquote>\n<p>设置<code>k8s</code>命令自动补全</p>\n</blockquote>\n<pre><code>yum -y install bash-completion\nsource /usr/share/bash-completion/bash_completion\nsource &#x3C;(kubectl completion bash)\necho \"source &#x3C;(kubectl completion bash)\" >> ~/.bashrc\n</code></pre>\n<h1>初始化集群</h1>\n<h2>初始化 <code>master</code> 节点</h2>\n<h4>配置 <code>kubeadm</code> 初始化文件</h4>\n<pre><code>cat &#x3C;&#x3C;EOF > ./kubeadm-config.yaml\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\nkubernetesVersion: v1.18.3\nimageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers\n\n#master地址\ncontrolPlaneEndpoint: \"[Mater Private IP]:6443\" \nnetworking:\n  serviceSubnet: \"10.96.0.0/16\" \n\n  #k8s容器组所在的网段\n  podSubnet: \"10.20.0.1/16\" \n  dnsDomain: \"cluster.local\"\n\n# 为了让证书包含公网IP，从而允许从外网访问集群\napiServer:\n  certSANs:       #填写所有kube-apiserver节点的hostname、IP、VIP\n  - k8s-m1        #请替换为hostname\n  - [Master Public IP]  #请替换为公网\n  - [Mater Private IP]  #请替换为私网\n  - 10.96.0.1     #不要替换，此IP是API的集群地址，部分服务会用到\n\nEOF\n</code></pre>\n<h4>初始化 <code>master</code></h4>\n<blockquote>\n<p>⚠️如果想要重新初始化，需要执行命令 <code>kubeadm reset -f</code></p>\n</blockquote>\n<blockquote>\n<p><code>kubeadm init --config=kubeadm-config.yaml --upload-certs</code></p>\n</blockquote>\n<pre><code># kubeadm init --config=kubeadm-config.yaml\n\n....\n\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nYou can now join any number of control-plane nodes by copying certificate authorities\nand service account keys on each node and then running the following as root:\n\n  kubeadm join [Mater Private IP]:6443 --token xxxxxx.xxxxxxxxxxxxxxxxx \\\n    --discovery-token-ca-cert-hash sha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \\\n    --control-plane \n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join [Mater Private IP]:6443 --token xxxxxx.xxxxxxxxxxxxxxxxx \\\n    --discovery-token-ca-cert-hash sha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \n</code></pre>\n<blockquote>\n<p>⚠️ 保存 token sha256</p>\n</blockquote>\n<blockquote>\n<p>拷贝 <code>kubeconfig</code> 文件（这里的路径为 <code>/root</code>）</p>\n</blockquote>\n<pre><code>mkdir -p $HOME/.kube\ncp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nchown $(id -u):$(id -g) $HOME/.kube/config\n</code></pre>\n<h2>初始化 <code>worker</code> 节点</h2>\n<blockquote>\n<p>将master节点上的 <code>$HOME/.kube/config</code> 文件拷贝到 <code>worker</code> 节点对应的文件中</p>\n</blockquote>\n<pre><code>mkdir -p $HOME/.kube \nscp k8s-m1:~/.kube/config $HOME/.kube\nchown $(id -u):$(id -g) $HOME/.kube/config\n</code></pre>\n<blockquote>\n<p>将 <code>worker</code> 节点加入到集群中</p>\n</blockquote>\n<blockquote>\n<p>这里需要用到2.2中初始化master最后生成的token和sha256值</p>\n</blockquote>\n<pre><code>kubeadm join [Mater Private IP]:6443 --token xxxxxx.xxxxxxxxxxxxxxxxx \\\n    --discovery-token-ca-cert-hash sha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \n\n... ...\n\nThis node has joined the cluster:\n* Certificate signing request was sent to apiserver and a response was received.\n* The Kubelet was informed of the new secure connection details.\n\nRun 'kubectl get nodes' on the control-plane to see this node join the cluster.\n</code></pre>\n<blockquote>\n<p>如果忘记了token和sha256值，可以在master节点使用如下命令查看</p>\n</blockquote>\n<pre><code>#kubeadm token list\nTOKEN                     TTL       EXPIRES                     USAGES                   DESCRIPTION   EXTRA GROUPS\npx979r.mphk9ee5ya8fgy44   20h       2020-03-18T13:49:48+08:00   authentication,signing   &#x3C;none>        system:bootstrappers:kubeadm:default-node-token\n</code></pre>\n<blockquote>\n<p>查看sha256</p>\n</blockquote>\n<pre><code>#openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre>\n<blockquote>\n<p>同时查看token和sha256</p>\n</blockquote>\n<pre><code>#kubeadm token create --print-join-command\nkubeadm join 192.168.9.10:6443 --token 9b28zg.oyt0kvvpmtrem4bg     --discovery-token-ca-cert-hash sha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre>\n<blockquote>\n<p>master节点查看node（发现状态都是NotReady，因为还没有安装网络插件，这里我们安装calio官方插件文档）</p>\n</blockquote>\n<pre><code>kubectl get nodes\n</code></pre>\n<h2><code>Master</code> 节点安装网络插件calio</h2>\n<blockquote>\n<p>下载文件</p>\n</blockquote>\n<pre><code>wget https://docs.projectcalico.org/v3.8/manifests/calico.yaml\n</code></pre>\n<blockquote>\n<p>因为在上边kubeadm-config.yaml配置文件中指定了容器组IP，所以需要将文件中的<code>625</code>行改为如下：</p>\n</blockquote>\n<pre><code>value: \"10.20.0.1/16\"\n</code></pre>\n<blockquote>\n<p>vi 命令</p>\n</blockquote>\n<pre><code>:set number\n</code></pre>\n<blockquote>\n<p>修改完成后安装calico网络插件</p>\n</blockquote>\n<pre><code>kubectl apply -f calico.yaml\n</code></pre>\n<blockquote>\n<p>安装完成后稍等一会查看pods状态</p>\n</blockquote>\n<pre><code>kubectl get pods -n kube-system\n</code></pre>\n<blockquote>\n<p>查看node状态</p>\n</blockquote>\n<pre><code>kubectl get nodes \n</code></pre>\n<h2>启动 <code>LENS</code></h2>\n<h4>阿里云开通 <code>6443</code> 端口</h4>\n<h4>Lens 添加集群</h4>\n<pre><code>cat ~/.kube/config\n</code></pre>\n<blockquote>\n<p>IP 修改为公网IP</p>\n</blockquote>\n<h4>启用集群的 <code>Metrics</code> Feature</h4>\n<h1>准备镜像</h1>\n<h4>镜像列表</h4>\n<ul>\n<li>registry.cn-beijing.aliyuncs.com/[???]/worker:0.2.0-[???]</li>\n<li>registry.cn-beijing.aliyuncs.com/[???]/service:0.2.0-[???]</li>\n<li>registry.cn-beijing.aliyuncs.com/[???]/frontend:0.2.0-[???]</li>\n<li>rabbitmq:3.8.2-alpine</li>\n<li>postgres:12.1-alpine</li>\n<li>node:12.14.1-alpine</li>\n<li>redis:5.0.7-alpine</li>\n<li>nginx:1.17.6-alpine</li>\n<li>busybox</li>\n</ul>\n<h4>命令 - 登录阿里云镜像服务</h4>\n<pre><code>docker login -u [user name] -p [password] registry.cn-hangzhou.aliyuncs.com\n</code></pre>\n<blockquote>\n<p>可以参考阿里云镜像服务的命令行提示</p>\n</blockquote>\n<h4>命令 - 获取镜像</h4>\n<pre><code>docker pull\n</code></pre>\n<h1>安装 Git</h1>\n<pre><code>yum install git\n</code></pre>\n<h1>获取 Demo 脚本</h1>\n<blockquote>\n<p>git repo of dockerimages</p>\n</blockquote>\n<pre><code>#!/bin/bash\ngit clone --depth=1 https://[user name]:[password]@github.com/YunzhiWei/dockerimages.git\n</code></pre>\n<h1>启动 Ingress</h1>\n<h2>Ingress Controller of Traefik</h2>\n<blockquote>\n<p>切换到 <code>architecture/traefik</code> 目录</p>\n</blockquote>\n<h4>Apply rbac role and role binding</h4>\n<pre><code># kubectl apply -f traefik-rbac.yaml\n# kubectl describe clusterrole traefik-ingress-controller -n kube-system\n</code></pre>\n<h4>Apply daemonset</h4>\n<pre><code>kubectl apply -f traefik-ds-http.yaml\nkubectl get all -n kube-system | grep traefik\n</code></pre>"},{"fields":{"filename":"20210125006_wechat_dev_setup"},"frontmatter":{"id":"20210125006_wechat_dev_setup","title":"微信公众号开发的相关配置","subtitle":"基于微信公众号开发所需的公共号管理控制台相关配置","subject":"WeReady","author":"Chis Wei","keywords":"微信;公众号","tags":null,"category":"指导手册","cover":null,"created_when":"2021-01-25","updated_when":"2021-01-25","date":null},"excerpt":"微信公众号开发的相关配置 参考文章  OAuth2.0实战之微信授权篇_慕课手记 wechat-api…","html":"<h1>微信公众号开发的相关配置</h1>\n<h2>参考文章</h2>\n<ul>\n<li><a href=\"https://cnodejs.org/topic/555fec114eb040084cfe5d15\"></a></li>\n<li><a href=\"https://www.imooc.com/article/17696\">OAuth2.0实战之微信授权篇_慕课手记</a></li>\n<li><a href=\"http://doxmate.cool/node-webot/wechat-api/index.html#index_%E4%BA%A4%E6%B5%81%E7%BE%A4\">wechat-api Documentation</a></li>\n</ul>\n<h2>微信公众平台设置</h2>\n<p><a href=\"https://mp.weixin.qq.com\">微信公众平台</a></p>\n<h3>设置 ==> 公众号设置</h3>\n<h4>功能设置</h4>\n<ul>\n<li>设置JS接口安全域名</li>\n</ul>\n<p>[domainurl]</p>\n<ul>\n<li>设置网页授权域名</li>\n</ul>\n<p>[domainurl]</p>\n<ul>\n<li>下载 MP<em>verify</em>xxxxxxx.txt</li>\n</ul>\n<blockquote>\n<p>下载到 <code>/[project folder]/public</code>\n确保微信相关设置和代码的 setting/config 设置一致</p>\n</blockquote>\n<ul>\n<li>设置服务器路由</li>\n</ul>\n<pre><code>app.use(express.static(path.join(__dirname, 'public')));\n</code></pre>\n<h3>开发 ==> 基本配置</h3>\n<ul>\n<li>开发者ID（AppID）</li>\n<li>开发者密码（AppSecret）</li>\n<li>IP 白名单</li>\n<li>服务器地址（URL）</li>\n<li>令牌（Token）</li>\n<li>消息加解密方式</li>\n</ul>\n<blockquote>\n<p>确保项目的 setting 目录中的 appid、appsecret、url、token 的配置正确（真正部署到生产环境时，这些信息需要删除，并保存到服务器的环境变量中）\n确保服务器的 IP 地址在白名单之内：58.37.109.51\n消息加解密方式根据不同情况正确选择\n服务器地址（URL）需要能够正确解析并响应微信服务器的验证请求\n服务器地址（URL）举例：<code>http://www.[domainname].com/wechat/token/check</code>\n每次修改服务器配置，如果一切配置无误，则修改成功，配置生效，否则，无法完成修改（这也能够在一定程度上验证，微信服务器和代码的匹配）</p>\n</blockquote>\n<h3>开发 ==> 接口权限</h3>\n<ul>\n<li>未获得的接口</li>\n</ul>\n<blockquote>\n<p>微信小店\n设备功能</p>\n</blockquote>\n<ul>\n<li>网页授权</li>\n</ul>\n<blockquote>\n<p>与 <strong>设置 ==> 公众号设置</strong> 是同一个配置页面</p>\n</blockquote>\n<h4>微信支付 | 商户平台</h4>\n<p><a href=\"https://pay.weixin.qq.com\">微信支付商户平台</a></p>\n<h4>账户中心</h4>\n<ul>\n<li>操作证书：在本机安装操作证书</li>\n<li>商户信息：微信支付商户号（mchId）</li>\n<li>API 安全：API 密钥，设置 API 密钥（partnerKey）</li>\n</ul>\n<h4>产品中心</h4>\n<ul>\n<li>开发配置 -> 支付配置：公众号支付（authcheck）；扫码支付（notifyUrl）；</li>\n<li>APPID 授权管理：绑定授权（appId）</li>\n</ul>\n<h2>微信 Web 开发者工具</h2>\n<blockquote>\n<p>直接输入 URL，检查浏览器调试信息输出</p>\n</blockquote>\n<h2>开发环境 与 生产环境</h2>\n<p>切换 开发环境 与 生产环境 的时候，经常需要修改的微信配置包括：</p>\n<p>公众号：</p>\n<ul>\n<li>设置 ==> 公众号设置 ==> 功能设置 ==> 网页授权域名</li>\n<li>开发 ==> 基本配置 ==> 服务器配置 ==> 服务器地址（URL）</li>\n</ul>\n<p>商铺：</p>\n<ul>\n<li>产品中心 ==> 开发配置 ==> 支付配置 ==> 扫码回调链接</li>\n</ul>"},{"fields":{"filename":"20210125007_lrzsz_usage"},"frontmatter":{"id":"20210125007_lrzsz_usage","title":"Windows 客户端和 Linux 服务器间的文件传输","subtitle":"利用 lrzsz 实现 XShell 下面，对 Linux 服务器的文件进行上传和下载","subject":"运维","author":"Chis Wei","keywords":"XShell;lrzsz;rz;sz;","tags":null,"category":"实战技巧","cover":null,"created_when":"2021-01-25","updated_when":"2021-01-25","date":null},"excerpt":"Windows 客户端和 Linux 服务器间的文件传输 运行环境 XShell…","html":"<h1>Windows 客户端和 Linux 服务器间的文件传输</h1>\n<h4>运行环境</h4>\n<p><code>XShell</code></p>\n<h4>安装</h4>\n<pre><code>[root@.... ~]# yum install  lrzsz -y\n</code></pre>\n<h4>检查安装结果</h4>\n<pre><code>[root@.... ~]# rpm -qa |grep lrzsz\n</code></pre>\n<h4>上传文件（上传到 Linux 服务器）</h4>\n<pre><code>[root@.... ~]# rz\n</code></pre>\n<h4>下载文件（下载到 Windows 客户端）</h4>\n<pre><code>[root@.... ~]# sz [filename]\n</code></pre>"},{"fields":{"filename":"20210125004_pg_backup_restore"},"frontmatter":{"id":"20210125004_pg_backup_restore","title":"postgres 数据库的备份与恢复","subtitle":"pg数据库的全备份，以及数据恢复","subject":"运维","author":"Chis Wei","keywords":"postgres;backup;restore","tags":null,"category":"指导手册","cover":null,"created_when":"2021-01-25","updated_when":"2021-01-25","date":null},"excerpt":"postgres 数据库的备份与恢复 参考 1 备份 命令格式 恢复 Option 1 进入容器 dbpg…","html":"<h1>postgres 数据库的备份与恢复</h1>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/0602d5c77b8f?tdsourcetag=s_pcqq_aiomsg\">1</a></li>\n</ul>\n<h2>备份</h2>\n<h4>命令格式</h4>\n<pre><code>pg_dump -h [host] -U [user] [database] > [output file]\n</code></pre>\n<pre><code>#!/bin/bash\n\npg_dump -h dbpg -U postgres [database] > /backup/pgdump.sql\nmv -f /backup/pgdump.sql /backup/pg_dump_`date +%Y%m%d%H%M%S`.sql\n</code></pre>\n<h2>恢复</h2>\n<h3>Option 1</h3>\n<h4>进入容器 <code>dbpg</code></h4>\n<h4>进入脚本目录</h4>\n<pre><code>cd script\n</code></pre>\n<h4>进入数据库</h4>\n<pre><code>psql -d archellis -U postgres\n</code></pre>\n<h4>清空数据</h4>\n<pre><code>\\i clear_all.sql;\n</code></pre>\n<h4>恢复数据</h4>\n<pre><code>\\i pg_dump_xxxxxxx.sql;\n</code></pre>\n<h3>Option 2</h3>\n<h4>登录数据库</h4>\n<pre><code>psql -U postgres \n</code></pre>\n<h4>断开所有连接</h4>\n<pre><code>SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE datname = 'archellis' AND pid &#x3C;> pg_backend_pid();\n</code></pre>\n<h4>退出登录</h4>\n<pre><code>\\q\n</code></pre>\n<h4>删除数据库</h4>\n<pre><code>dropdb -U postgres [database]\n</code></pre>\n<h4>创建数据库</h4>\n<pre><code>createdb -U postgres [database]\n</code></pre>\n<h4>恢复数据</h4>\n<pre><code>psql -d [database] -U postgres -f pg_dump_xxxxxxxx.sql\n</code></pre>"},{"fields":{"filename":"20210125008_screen_usage"},"frontmatter":{"id":"20210125008_screen_usage","title":"XShell连接Linux服务器执行程序的常驻运行","subtitle":"XShell 下利用 screen 命令，实现命令行的后台常驻运行","subject":"运维","author":"Chis Wei","keywords":"screen;","tags":null,"category":"实战技巧","cover":null,"created_when":"2021-01-25","updated_when":"2021-01-25","date":null},"excerpt":"Linux程序的常驻运行 安装 使用 创建一个新的会话 下面命令中test…","html":"<h1>Linux程序的常驻运行</h1>\n<h2>安装</h2>\n<pre><code>[root@VM_183_120_centos ~]# yum install screen -y \n[root@VM_183_120_centos ~]# rpm -qa|grep screen\n</code></pre>\n<h2>使用</h2>\n<h4>创建一个新的会话</h4>\n<p>下面命令中test为新建会话的名称</p>\n<pre><code>[root@VM_183_120_centos ~]# screen -S test\n</code></pre>\n<h4>查看已有会话</h4>\n<pre><code>[root@VM_183_120_centos ~]# screen -ls\n</code></pre>\n<h4>重连会话（在这里我们重连test）</h4>\n<pre><code>[root@VM_183_120_centos ~]# screen  -r test //可以是名字test也可以是session ID\n</code></pre>\n<h4>退出会话</h4>\n<pre><code>[root@VM_183_120_centos ~]#screen -d  &#x3C;session ID 或者 名字>\n</code></pre>\n<h4>清除dead 会话</h4>\n<p>如果由于某种原因其中一个会话死掉了（例如人为杀掉该会话），这时screen -list会显示该会话为dead状态。使用screen -wipe命令清除该会话</p>\n<pre><code>[root@VM_183_120_centos ~]#screen -wipe\n</code></pre>\n<h4>关闭或杀死窗口</h4>\n<ul>\n<li>方法 - 1</li>\n</ul>\n<p>退出会话后，使用 screen -X -S [session id] quit 命令，可以结束某个session</p>\n<pre><code>[root@1core2g201802 ~]# screen -ls\nThere are screens on:\n    14954.test  (Detached)\n    27902.frps  (Detached)\n2 Sockets in /var/run/screen/S-root.\n\n[root@1core2g201802 ~]# screen -X -S 14954 quit\n[root@1core2g201802 ~]# screen -ls\nThere is a screen on:\n    27902.frps  (Detached)\n1 Socket in /var/run/screen/S-root.\n</code></pre>\n<ul>\n<li>方法 - 2</li>\n</ul>\n<p>如果已经在某个 screen session 中，可以使用 exit 命令退出当前 session\n如下：在 test session 中执行 exit 命令</p>\n<pre><code>[root@1core2g201802 ~]# screen -ls\nThere are screens on:\n        15419.test      (Attached)\n        27902.frps      (Detached)\n2 Sockets in /var/run/screen/S-root.\n\n[root@1core2g201802 ~]# exit\n</code></pre>\n<blockquote>\n<p>注意</p>\n<p>Crtl + a +d     保存进程并退出作业(程序在screen中继续运行，screen -ls 可查看)</p>\n<p>exit            退出作业和进程(程序终止，screen -ls 不可查看)</p>\n</blockquote>"},{"fields":{"filename":"20210125001_win_dev_env_setup"},"frontmatter":{"id":"20210125001_win_dev_env_setup","title":"Windows开发环境的安装设置","subtitle":"Windows系统下，基于Nodejs做全栈开发的系统设置","subject":"开发环境","author":"Chis Wei","keywords":"Windows;Development Environment","tags":null,"category":"指导手册","cover":null,"created_when":"2021-01-25","updated_when":"2021-01-25","date":null},"excerpt":"Windows开发环境的安装设置 Chrome Download Here 登录并同步信息 设置启动页 Firefox…","html":"<h1>Windows开发环境的安装设置</h1>\n<h2>Chrome</h2>\n<ol>\n<li><a href=\"https://www.google.com/chrome/\">Download Here</a></li>\n<li>登录并同步信息</li>\n<li>设置启动页</li>\n</ol>\n<h2>Firefox</h2>\n<ul>\n<li><a href=\"http://www.firefox.com.cn/\">Download Here</a></li>\n</ul>\n<h2>1Passport</h2>\n<ol>\n<li><a href=\"https://1password.com/\">Download Here</a></li>\n<li>同步信息</li>\n</ol>\n<h2>VPN</h2>\n<ol>\n<li>复制可执行文件</li>\n<li>配置服务器设置</li>\n</ol>\n<h2>Xshell</h2>\n<ol>\n<li><a href=\"https://www.netsarang.com/en/xshell/\">Download Here</a></li>\n<li>新建<code>会话</code>，连接到服务器</li>\n<li>添加到<code>会话地址栏</code></li>\n</ol>\n<h2>Git</h2>\n<ol>\n<li><a href=\"https://git-scm.com/downloads\">Download Here</a></li>\n<li><a href=\"https://git-scm.com/downloads/guis\">Check GUI clients here</a></li>\n</ol>\n<h2>Github Tools</h2>\n<ul>\n<li><a href=\"https://desktop.github.com/\">Github Desktop</a></li>\n</ul>\n<h2>SourceTree</h2>\n<ul>\n<li><a href=\"https://www.sourcetreeapp.com/\">Download Here</a></li>\n</ul>\n<h2>VSCode</h2>\n<ul>\n<li><a href=\"https://code.visualstudio.com/\">Download Here</a></li>\n<li>\n<p>安装扩展</p>\n<ul>\n<li>Chinese (Simplified) Language Pack for Visual Studio Code</li>\n<li>Markdown Preview Enhanced</li>\n<li>Quokka.js</li>\n<li>Emoji Snippets</li>\n<li>VSCode NestJs Snippets</li>\n<li>ES7 React/Redux/GraphQL/React-Native snippets</li>\n<li>vscode-styled-components</li>\n</ul>\n</li>\n</ul>\n<h2>Postman</h2>\n<ol>\n<li><a href=\"https://www.postman.com/downloads/\">Download Here</a></li>\n<li>登录账号</li>\n<li>同步数据</li>\n</ol>\n<h2>Nodejs</h2>\n<ol>\n<li><a href=\"https://nodejs.org/en/download/\">Download Here</a></li>\n<li>全局安装</li>\n</ol>\n<pre><code>npm install -g yarn\nnpm install -g mocha\nnpm install -g istanbul\n</code></pre>\n<h2>postgresql</h2>\n<ol>\n<li><a href=\"https://www.postgresql.org/download/\">Download Here</a></li>\n<li><a href=\"https://www.enterprisedb.com/downloads/postgres-postgresql-downloads\">Windows Version</a></li>\n</ol>\n<blockquote>\n<p>Stack Builder may fail. It doesn't matter.</p>\n</blockquote>\n<ol start=\"3\">\n<li>增加环境变量：C:\\Program Files\\PostgreSQL\\xx.x\\bin</li>\n<li>重启 Windows</li>\n<li>SQL Shell (psql)</li>\n</ol>\n<pre><code>c:\\xxx > psql\npostgres=# DROP DATABASE [database name];\npostgres=# DROP USER [user name];\npostgres=# CREATE USER [user name] WITH PASSWORD '[password]';\npostgres=# CREATE DATABASE [database name] OWNER [user name];\npostgres=# GRANT ALL PRIVILEGES ON DATABASE [database name] TO [user name];\n</code></pre>\n<ol start=\"6\">\n<li>安装扩展</li>\n</ol>\n<pre><code>c:\\xxx > psql -U [database name] -d [user name]\n[database name]=> \\c [database name] postgres;\n[database name]=# create extension ltree;\n[database name]=# create extension \"pgcrypto\";\n[database name]=# create extension tablefunc;\n[database name]=# \\c [database name] [user name];\n</code></pre>\n<h2>LENS</h2>\n<ul>\n<li><a href=\"https://github.com/lensapp/lens/releases/download/v3.5.0/Lens-Setup-3.5.0.exe\">Download Here</a></li>\n</ul>\n<h2>VMWare Workstation</h2>\n<ol>\n<li>Download</li>\n<li>Install</li>\n<li>创建虚机</li>\n<li>启动虚机</li>\n<li>安全容器或集群环境，参考：xxxx</li>\n</ol>\n<h2>其他</h2>\n<ul>\n<li>钉钉</li>\n<li>腾讯会议</li>\n</ul>"},{"fields":{"filename":"README"},"frontmatter":{"id":"20210123000_readme","title":"关于 notebook","subtitle":null,"subject":"WeReady","author":"Chis Wei","keywords":"标题;主题;分类;标签;关键字;封面;作者;创建日期;更新日期","tags":"WeReady;Notebook","category":"声明公告","cover":null,"created_when":"2021-01-23","updated_when":"2021-01-23","date":null},"excerpt":"Title 标题 subject 主题，例如： 云计算、云原生、人工智能 (AI…","html":"<h1>Title</h1>\n<p>标题</p>\n<h1>subject</h1>\n<p>主题，例如：</p>\n<ul>\n<li>云计算、云原生、人工智能 (AI)、微服务、</li>\n<li>产品、设计、架构、开发、测试、运维、前端、后端、管理、</li>\n<li>Fullstack、Devops、</li>\n<li>版本管理、包管理、持续集成、持续发布、</li>\n</ul>\n<h1>category</h1>\n<p>分类</p>\n<ul>\n<li>新闻动态</li>\n<li>推荐精选</li>\n<li>概念理解</li>\n<li>实战技巧</li>\n<li>指导手册</li>\n<li>最佳实践</li>\n<li>疑难杂症</li>\n<li>心得体会</li>\n</ul>\n<h1>tags</h1>\n<p>标签，例如：</p>\n<ul>\n<li>HTML、CSS、JS、Python、...</li>\n<li>Nodejs、NPM、Nestjs、React、Ant Design、Gatsby、Knexjs、...</li>\n<li>git、github、...</li>\n<li>Linux、Docker、Kubernetes (K8S)、...</li>\n<li>PostgreSQL、RabbitMQ、Redis、...</li>\n</ul>\n<h1>keywords</h1>\n<p>关键字：</p>\n<h1>cover</h1>\n<p>封面图片链接</p>\n<h1>author</h1>\n<p>作者</p>\n<h1>created_when</h1>\n<p>创建日期</p>\n<h1>updated_when</h1>\n<p>更新日期</p>"}]}}}